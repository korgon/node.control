var util = require('util');
var EventEmitter = require('events').EventEmitter;

Flower = exports = module.exports = function Flower(addr, xbee) {
  EventEmitter.call(this);
  this.xbee = xbee;
  this.addr = addr;
  this.device = this.xbee.addNode(this.addr);

  this.isNear = false;

  this.on('data', this.parse);
}

util.inherits(Flower, EventEmitter);

Flower.prototype.on = function(evt, cb) {
  return this.device.on(evt, cb);
}

Flower.prototype.close = function(cb) {
  var self = this;
  this.setPetals(0, function(err) {
    this.setLed(0, cb);
  });
}

Flower.prototype.openHalf = function(cb) {
  var self = this;
  this.setPetals(70, function(err) {
    self.setLed(1, cb);
  });
}

Flower.prototype.openFull = function(cb) {
  var self = this;
  this.setPetals(127, function(err) {
    self.setLed(127, cb);
  });
}

Flower.prototype.setLed = function(value, cb) {
  var msg = new Buffer(2, 'binary');
  msg[0] = "l".charCodeAt(0);
  msg[1] = value;
  this.device.send(msg, cb);
}

Flower.prototype.setPetals = function(value, cb) {
  var msg = new Buffer(2, 'binary');
  msg[0] = "p".charCodeAt(0);
  msg[1] = value;
  this.device.send(msg, cb)
}

// Parse Data Comming from flower
Flower.prototype.parse = function(data) {
  // Simple protocol based on single chars
  console.log('Flower: '+data);
  if (data == 'f') {
    this.emit('far');
    this.isNear = false;
  }
  if (data == 'n') {
    this.emit('near');
    this.isNear = true;
  }
}
