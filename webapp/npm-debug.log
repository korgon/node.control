0 info it worked if it ends with ok
1 verbose cli [ '/usr/bin/node', '/usr/bin/npm', 'install', 'svd-xbee' ]
2 info using npm@1.2.14
3 info using node@v0.8.22
4 verbose read json /home/node/repository/webapp/package.json
5 warn package.json node.control@0.0.1 No README.md file found!
6 verbose read json /home/node/repository/webapp/node_modules/socket.io/package.json
7 verbose read json /home/node/repository/webapp/node_modules/jade/package.json
8 verbose read json /home/node/repository/webapp/node_modules/nodemon/package.json
9 verbose read json /home/node/repository/webapp/node_modules/express.io/package.json
10 verbose read json /home/node/repository/webapp/node_modules/express.io-middleware/package.json
11 verbose read json /home/node/repository/webapp/node_modules/dblite/package.json
12 verbose read json /home/node/repository/webapp/node_modules/express/package.json
13 verbose from cache /home/node/repository/webapp/package.json
14 verbose readDependencies using package.json deps
15 verbose cache add [ 'svd-xbee', null ]
16 verbose cache add name=undefined spec="svd-xbee" args=["svd-xbee",null]
17 verbose parsed url { pathname: 'svd-xbee', path: 'svd-xbee', href: 'svd-xbee' }
18 silly lockFile 93a315f8-svd-xbee svd-xbee
19 verbose lock svd-xbee /home/node/.npm/93a315f8-svd-xbee.lock
20 silly lockFile 93a315f8-svd-xbee svd-xbee
21 silly lockFile 93a315f8-svd-xbee svd-xbee
22 verbose addNamed [ 'svd-xbee', '' ]
23 verbose addNamed [ null, '' ]
24 silly lockFile d215d733-svd-xbee svd-xbee@
25 verbose lock svd-xbee@ /home/node/.npm/d215d733-svd-xbee.lock
26 silly addNameRange { name: 'svd-xbee', range: '', hasData: false }
27 verbose registry.get svd-xbee not expired, no request
28 silly addNameRange number 2 { name: 'svd-xbee', range: '', hasData: true }
29 silly addNameRange versions [ 'svd-xbee',
29 silly addNameRange   [ '0.0.5',
29 silly addNameRange     '0.0.6',
29 silly addNameRange     '0.0.7',
29 silly addNameRange     '0.0.8',
29 silly addNameRange     '0.0.9',
29 silly addNameRange     '0.1.0',
29 silly addNameRange     '0.1.1',
29 silly addNameRange     '0.2.0',
29 silly addNameRange     '0.2.1',
29 silly addNameRange     '0.2.2',
29 silly addNameRange     '0.2.3',
29 silly addNameRange     '0.3.0',
29 silly addNameRange     '0.3.1',
29 silly addNameRange     '0.3.2',
29 silly addNameRange     '0.3.3',
29 silly addNameRange     '0.3.4',
29 silly addNameRange     '0.3.5' ] ]
30 verbose addNamed [ 'svd-xbee', '0.3.5' ]
31 verbose addNamed [ '0.3.5', '0.3.5' ]
32 silly lockFile a9961fc2-svd-xbee-0-3-5 svd-xbee@0.3.5
33 verbose lock svd-xbee@0.3.5 /home/node/.npm/a9961fc2-svd-xbee-0-3-5.lock
34 verbose read json /home/node/.npm/svd-xbee/0.3.5/package/package.json
35 silly lockFile a9961fc2-svd-xbee-0-3-5 svd-xbee@0.3.5
36 silly lockFile a9961fc2-svd-xbee-0-3-5 svd-xbee@0.3.5
37 silly lockFile d215d733-svd-xbee svd-xbee@
38 silly lockFile d215d733-svd-xbee svd-xbee@
39 silly resolved [ { name: 'svd-xbee',
39 silly resolved     version: '0.3.5',
39 silly resolved     description: 'A more high level fork of Richard Morrison\'s node-xbee',
39 silly resolved     author: { name: 'Jan Kolkmeier', email: 'jankolkmeier@gmail.com' },
39 silly resolved     maintainers: 'Jan Kolkmeier <jankolkmeier@gmail.com>',
39 silly resolved     contributors: [ [Object], [Object], [Object] ],
39 silly resolved     main: './index.js',
39 silly resolved     keywords:
39 silly resolved      [ 'xbee',
39 silly resolved        'serialport',
39 silly resolved        'robots',
39 silly resolved        'sensors',
39 silly resolved        'automation',
39 silly resolved        'control' ],
39 silly resolved     homepage: 'https://github.com/jouz/svd-xbee',
39 silly resolved     dependencies: { serialport: '1.1.x', async: '0.1.x' },
39 silly resolved     engines: { node: '0.6.x | 0.8.x | 0.10.x' },
39 silly resolved     repository: { type: 'git', url: 'git://github.com/jouz/svd-xbee.git' },
39 silly resolved     readmeFilename: 'README.md',
39 silly resolved     readme: '# SVD-XBEE\r\n\r\n[Digi\'s xbee modules](http://www.digi.com/xbee) are good for quickly building low power wireless networks. They can be used to send/receive text data from serial ports of different devices. XBees can also be used alone for their on board digital and analog I/O capabilities.\r\n\r\n**svd-xbee** is a high level, actively maintained fork of Richard Morrison\'s [node-xbee](http://github.com/mozz100/node-xbee). It talks the ZigBee API with XBee radio modules over serial connections and provides high level abstractions of the XBee\'s functionality.\r\n\r\n### Nutshell\r\n```javascript\r\nvar XBee = require(\'svd-xbee\');\r\n\r\nvar xbee = new XBee({\r\n  port: \'COM3\',   // replace with yours\r\n  baudrate: 9600 // 9600 is default\r\n}).init();\r\n\r\nvar robot = xbee.addNode([0x00,0x13,0xa2,0x00,0x40,0x61,0xaa,0xe2]);\r\n\r\nvar robot.on("data", function(data) {\r\n    console.log("robot>", data);\r\n    if (data == "ping") robot.send("pong");\r\n});\r\n```\r\n### Features\r\n\r\n- Asynchronous architecture\r\n- Event-based Node Discovery\r\n- Local and remote AT commands\r\n- High-level abstraction of common tasks\r\n- Parse API frames into meaningful objects\r\n    - Regular text data\r\n    - Analog & Digital I/O Samples\r\n    - Modem Status\r\n    - Transmission Reports\r\n\r\n### Installation\r\n\r\n    npm install svd-xbee\r\n\r\n### Documentation\r\n\r\nFor documentation, see the [Documentation](https://github.com/jouz/svd-xbee/wiki/Documentation).\r\n\r\n### EXAMPLES\r\n\r\nSee the [examples folder](https://github.com/jouz/svd-xbee/tree/master/examples) in the repository for more examples.\r\n\r\n## SUPPORTED XBEE MODELS\r\n\r\nBoth ZNet 2.5 and ZIGBEE modules should be supported. Since ZIGBEE offers more features and is more robust, you might be interested in upgrading your modules from ZNet 2.5 to ZIGBEE: [upgradingfromznettozb.pdf](ftp://ftp1.digi.com/support/documentation/upgradingfromznettozb.pdf).  \r\nDevelopment is done using Series 2 XBee modules with XB24-ZB (ZIGBEE) firmware. In specific, this document is used as reference: [90000976_M.pdf](http://ftp1.digi.com/support/documentation/90000976_M.pdf "http://ftp1.digi.com/support/documentation/90000976_M.pdf").\r\n\r\n\r\n## MODULE CONFIGURATION\r\n\r\nThe module communicating with svd-xbee must be set to use an API function set with escape characters enabled (ATAP = 2). Other nodes in the network can be configured however you find it convenient. See [Module Configuration](https://github.com/jouz/svd-xbee/wiki/Module-Configurationi) for more details.\r\n\r\n\r\n## ACKNOWLEDGMENTS\r\n\r\n* voodootikigod\'s [serialport module](https://github.com/voodootikigod/node-serialport) (in fact you\'re going to need this to use this package)\r\n* "[Building Wireless Sensor Networks](http://shop.oreilly.com/product/9780596807740.do)" by Rob Faludi\r\n\r\n\r\n## LICENSE\r\n\r\n\r\n> This work by <span xmlns:cc="http://creativecommons.org/ns#" property="cc:attributionName">Jan Kolkmeier</span> is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-sa/2.0/uk/">Creative Commons Attribution-ShareAlike 2.0 UK: England &amp; Wales License</a>.<br /><a rel="license" href="http://creativecommons.org/licenses/by-sa/2.0/uk/"><img alt="Creative Commons License" style="border-width:0" src="http://i.creativecommons.org/l/by-sa/2.0/uk/88x31.png" /></a><br />Based on a work at <a xmlns:dct="http://purl.org/dc/terms/" href="https://github.com/mozz100/node-xbee" rel="dct:source">github.com</a>.\r\n',
39 silly resolved     _id: 'svd-xbee@0.3.5',
39 silly resolved     _from: 'svd-xbee@' } ]
40 info install svd-xbee@0.3.5 into /home/node/repository/webapp
41 info installOne svd-xbee@0.3.5
42 warn engine svd-xbee@0.3.5: wanted: {"node":"0.6.x | 0.8.x | 0.10.x"} (current: {"node":"v0.8.22","npm":"1.2.14"})
43 verbose from cache /home/node/.npm/svd-xbee/0.3.5/package/package.json
44 info /home/node/repository/webapp/node_modules/svd-xbee unbuild
45 verbose read json /home/node/repository/webapp/node_modules/svd-xbee/package.json
46 verbose tar unpack /home/node/.npm/svd-xbee/0.3.5/package.tgz
47 silly lockFile 32d8fa99-ory-webapp-node-modules-svd-xbee /home/node/repository/webapp/node_modules/svd-xbee
48 verbose lock /home/node/repository/webapp/node_modules/svd-xbee /home/node/.npm/32d8fa99-ory-webapp-node-modules-svd-xbee.lock
49 silly lockFile ce93da6a-e-npm-svd-xbee-0-3-5-package-tgz /home/node/.npm/svd-xbee/0.3.5/package.tgz
50 verbose lock /home/node/.npm/svd-xbee/0.3.5/package.tgz /home/node/.npm/ce93da6a-e-npm-svd-xbee-0-3-5-package-tgz.lock
51 silly gunzTarPerm modes [ '755', '644' ]
52 silly gunzTarPerm extractEntry package.json
53 silly gunzTarPerm extractEntry README.md
54 silly gunzTarPerm extractEntry index.js
55 silly gunzTarPerm extractEntry lib/xbee-api.js
56 silly gunzTarPerm extractEntry lib/constants.js
57 silly gunzTarPerm extractEntry examples/web/web.js
58 silly gunzTarPerm extractEntry examples/web/index.html
59 silly gunzTarPerm extractEntry examples/next13/Flower.js
60 silly gunzTarPerm extractEntry examples/next13/index.js
61 silly gunzTarPerm extractEntry examples/next13/parser.js
62 silly gunzTarPerm extractEntry examples/next13/config.json
63 silly gunzTarPerm extractEntry examples/nutshell/nutshell.js
64 silly gunzTarPerm extractEntry examples/full/full.js
65 silly gunzTarPerm extractEntry examples/full/parser.js
66 verbose read json /home/node/repository/webapp/node_modules/svd-xbee/package.json
67 silly lockFile 32d8fa99-ory-webapp-node-modules-svd-xbee /home/node/repository/webapp/node_modules/svd-xbee
68 silly lockFile 32d8fa99-ory-webapp-node-modules-svd-xbee /home/node/repository/webapp/node_modules/svd-xbee
69 silly lockFile ce93da6a-e-npm-svd-xbee-0-3-5-package-tgz /home/node/.npm/svd-xbee/0.3.5/package.tgz
70 silly lockFile ce93da6a-e-npm-svd-xbee-0-3-5-package-tgz /home/node/.npm/svd-xbee/0.3.5/package.tgz
71 info preinstall svd-xbee@0.3.5
72 verbose from cache /home/node/repository/webapp/node_modules/svd-xbee/package.json
73 verbose readDependencies using package.json deps
74 verbose from cache /home/node/repository/webapp/node_modules/svd-xbee/package.json
75 verbose readDependencies using package.json deps
76 verbose cache add [ 'serialport@1.1.x', null ]
77 verbose cache add name=undefined spec="serialport@1.1.x" args=["serialport@1.1.x",null]
78 verbose parsed url { pathname: 'serialport@1.1.x',
78 verbose parsed url   path: 'serialport@1.1.x',
78 verbose parsed url   href: 'serialport@1.1.x' }
79 verbose cache add name="serialport" spec="1.1.x" args=["serialport","1.1.x"]
80 verbose parsed url { pathname: '1.1.x', path: '1.1.x', href: '1.1.x' }
81 verbose addNamed [ 'serialport', '1.1.x' ]
82 verbose addNamed [ null, '>=1.1.0- <1.2.0-' ]
83 silly lockFile 4b85187d-serialport-1-1-x serialport@1.1.x
84 verbose lock serialport@1.1.x /home/node/.npm/4b85187d-serialport-1-1-x.lock
85 verbose cache add [ 'async@0.1.x', null ]
86 verbose cache add name=undefined spec="async@0.1.x" args=["async@0.1.x",null]
87 verbose parsed url { pathname: 'async@0.1.x',
87 verbose parsed url   path: 'async@0.1.x',
87 verbose parsed url   href: 'async@0.1.x' }
88 verbose cache add name="async" spec="0.1.x" args=["async","0.1.x"]
89 verbose parsed url { pathname: '0.1.x', path: '0.1.x', href: '0.1.x' }
90 verbose addNamed [ 'async', '0.1.x' ]
91 verbose addNamed [ null, '>=0.1.0- <0.2.0-' ]
92 silly lockFile 463e1c03-async-0-1-x async@0.1.x
93 verbose lock async@0.1.x /home/node/.npm/463e1c03-async-0-1-x.lock
94 silly addNameRange { name: 'serialport', range: '>=1.1.0- <1.2.0-', hasData: false }
95 silly addNameRange { name: 'async', range: '>=0.1.0- <0.2.0-', hasData: false }
96 verbose registry.get serialport not expired, no request
97 silly addNameRange number 2 { name: 'serialport', range: '>=1.1.0- <1.2.0-', hasData: true }
98 silly addNameRange versions [ 'serialport',
98 silly addNameRange   [ '0.1.0',
98 silly addNameRange     '0.1.1',
98 silly addNameRange     '0.1.3',
98 silly addNameRange     '0.2.0',
98 silly addNameRange     '0.2.2',
98 silly addNameRange     '0.2.3',
98 silly addNameRange     '0.2.4',
98 silly addNameRange     '0.2.5',
98 silly addNameRange     '0.2.6',
98 silly addNameRange     '0.2.7',
98 silly addNameRange     '0.2.8',
98 silly addNameRange     '0.2.9',
98 silly addNameRange     '0.3.0',
98 silly addNameRange     '0.6.0',
98 silly addNameRange     '0.6.1',
98 silly addNameRange     '0.6.2',
98 silly addNameRange     '0.6.3',
98 silly addNameRange     '0.6.5',
98 silly addNameRange     '0.6.6',
98 silly addNameRange     '0.6.7',
98 silly addNameRange     '0.7.0',
98 silly addNameRange     '0.7.1',
98 silly addNameRange     '0.7.2',
98 silly addNameRange     '0.7.3',
98 silly addNameRange     '0.7.4',
98 silly addNameRange     '0.7.5',
98 silly addNameRange     '1.0.0',
98 silly addNameRange     '1.0.1',
98 silly addNameRange     '1.0.2',
98 silly addNameRange     '1.0.3',
98 silly addNameRange     '1.0.4',
98 silly addNameRange     '1.0.5',
98 silly addNameRange     '1.0.6',
98 silly addNameRange     '1.0.7',
98 silly addNameRange     '1.0.8',
98 silly addNameRange     '1.1.0',
98 silly addNameRange     '1.1.1',
98 silly addNameRange     '1.1.3',
98 silly addNameRange     '1.2.0',
98 silly addNameRange     '1.2.1',
98 silly addNameRange     '1.2.2',
98 silly addNameRange     '1.2.3',
98 silly addNameRange     '1.2.4',
98 silly addNameRange     '1.2.5' ] ]
99 verbose addNamed [ 'serialport', '1.1.3' ]
100 verbose addNamed [ '1.1.3', '1.1.3' ]
101 silly lockFile 34dd8f3e-serialport-1-1-3 serialport@1.1.3
102 verbose lock serialport@1.1.3 /home/node/.npm/34dd8f3e-serialport-1-1-3.lock
103 verbose registry.get async not expired, no request
104 silly addNameRange number 2 { name: 'async', range: '>=0.1.0- <0.2.0-', hasData: true }
105 silly addNameRange versions [ 'async',
105 silly addNameRange   [ '0.1.0',
105 silly addNameRange     '0.1.1',
105 silly addNameRange     '0.1.2',
105 silly addNameRange     '0.1.3',
105 silly addNameRange     '0.1.4',
105 silly addNameRange     '0.1.5',
105 silly addNameRange     '0.1.6',
105 silly addNameRange     '0.1.7',
105 silly addNameRange     '0.1.8',
105 silly addNameRange     '0.1.9',
105 silly addNameRange     '0.1.10',
105 silly addNameRange     '0.1.11',
105 silly addNameRange     '0.1.12',
105 silly addNameRange     '0.1.13',
105 silly addNameRange     '0.1.14',
105 silly addNameRange     '0.1.15',
105 silly addNameRange     '0.1.16',
105 silly addNameRange     '0.1.17',
105 silly addNameRange     '0.1.18',
105 silly addNameRange     '0.1.19',
105 silly addNameRange     '0.1.20',
105 silly addNameRange     '0.1.21',
105 silly addNameRange     '0.1.22',
105 silly addNameRange     '0.2.0',
105 silly addNameRange     '0.2.1',
105 silly addNameRange     '0.2.2',
105 silly addNameRange     '0.2.3',
105 silly addNameRange     '0.2.4',
105 silly addNameRange     '0.2.5',
105 silly addNameRange     '0.2.6',
105 silly addNameRange     '0.2.7',
105 silly addNameRange     '0.2.8',
105 silly addNameRange     '0.2.9' ] ]
106 verbose addNamed [ 'async', '0.1.22' ]
107 verbose addNamed [ '0.1.22', '0.1.22' ]
108 silly lockFile 09d21715-async-0-1-22 async@0.1.22
109 verbose lock async@0.1.22 /home/node/.npm/09d21715-async-0-1-22.lock
110 verbose read json /home/node/.npm/serialport/1.1.3/package/package.json
111 verbose read json /home/node/.npm/async/0.1.22/package/package.json
112 silly lockFile 34dd8f3e-serialport-1-1-3 serialport@1.1.3
113 silly lockFile 34dd8f3e-serialport-1-1-3 serialport@1.1.3
114 silly lockFile 09d21715-async-0-1-22 async@0.1.22
115 silly lockFile 09d21715-async-0-1-22 async@0.1.22
116 silly lockFile 4b85187d-serialport-1-1-x serialport@1.1.x
117 silly lockFile 4b85187d-serialport-1-1-x serialport@1.1.x
118 silly lockFile 463e1c03-async-0-1-x async@0.1.x
119 silly lockFile 463e1c03-async-0-1-x async@0.1.x
120 silly resolved [ { name: 'serialport',
120 silly resolved     version: '1.1.3',
120 silly resolved     description: 'Welcome your robotic javascript overlords. Better yet, program them!',
120 silly resolved     author:
120 silly resolved      { name: 'Chris Williams',
120 silly resolved        email: 'voodootikigod@gmail.com',
120 silly resolved        url: 'http://www.voodootikigod.com' },
120 silly resolved     main: './serialport',
120 silly resolved     repository:
120 silly resolved      { type: 'git',
120 silly resolved        url: 'git://github.com/voodootikigod/node-serialport.git' },
120 silly resolved     maintainers: [ [Object], [Object], [Object] ],
120 silly resolved     dependencies:
120 silly resolved      { bindings: '1.1.0',
120 silly resolved        async: '0.1.18',
120 silly resolved        sf: '0.1.6',
120 silly resolved        optimist: '~0.3.4' },
120 silly resolved     devDependencies: { mocha: '*', chai: '*' },
120 silly resolved     engines: { node: '>= 0.7.0' },
120 silly resolved     bin:
120 silly resolved      { serialportlist: './bin/serialportList.js',
120 silly resolved        serialportterm: './bin/serialportTerminal.js' },
120 silly resolved     scripts:
120 silly resolved      { test: 'mocha -R spec -t 60s -s 60s',
120 silly resolved        install: 'node-gyp rebuild' },
120 silly resolved     gypfile: true,
120 silly resolved     contributors:
120 silly resolved      [ [Object],
120 silly resolved        [Object],
120 silly resolved        [Object],
120 silly resolved        [Object],
120 silly resolved        [Object],
120 silly resolved        [Object],
120 silly resolved        [Object],
120 silly resolved        [Object],
120 silly resolved        [Object] ],
120 silly resolved     readme: '```\n  eeeee eeeee eeeee eeee       e  eeeee \n  8   8 8  88 8   8 8          8  8   " \n  8e  8 8   8 8e  8 8eee       8e 8eeee \n  88  8 8   8 88  8 88      e  88    88 \n  88  8 8eee8 88ee8 88ee 88 8ee88 8ee88\n\n  eeeee eeee eeeee  e  eeeee e     eeeee eeeee eeeee eeeee \n  8   " 8    8   8  8  8   8 8     8   8 8  88 8   8   8   \n  8eeee 8eee 8eee8e 8e 8eee8 8e    8eee8 8   8 8eee8e  8e  \n     88 88   88   8 88 88  8 88    88    8   8 88   8  88  \n  8ee88 88ee 88   8 88 88  8 88eee 88    8eee8 88   8  88\n```\n\nVersion: 1.1.3 - Released July 29, 2013\n\n*****\n\nImagine a world where you can write JavaScript to control blenders, lights, security systems, or even robots. Yes, I said robots. That world is here and now with node-serialport. It provides a very simple interface to the low level serial port code necessary to program [Arduino](http://www.arduino.cc/) chipsets, [X10](http://www.smarthome.com/manuals/protocol.txt) wireless communications, or even the rising [Z-Wave](http://www.z-wave.com/modules/ZwaveStart/) and [Zigbee](http://www.zigbee.org/) standards. The physical world is your oyster with this goodie. For a full break down of why we made this, please read [NodeBots - The Rise of JS Robotics](http://www.voodootikigod.com/nodebots-the-rise-of-js-robotics).\n\n*****\n\nRobots, you say?\n================\n\nThis library is admittedly a base level toolkit for building amazing things with real world (including robots). Here are a couple of those amazing things that leverage node-serialport:\n\n* [firmata](https://github.com/jgautier/firmata) Talk natively to Arduino using the firmata protocol.\n* [tmpad](http://tmpvar.com/project/tmpad/) [source](https://github.com/tmpvar/tmpad) - a DIY midi pad using infrared, arduino, and nodejs. [Video](http://vimeo.com/34575470)\n* [duino](https://github.com/ecto/duino) - A higher level framework for working with Arduinos in node.js.\n* [Arduino Drinking Game Extravaganza](http://jsconf.eu/2011/arduino_drinking_game_extravaganza.html) - AKA "The Russian" a hexidecimal drinking game for geeks by Uxebu presented at JSConf EU 2011.\n* [Arduino controlling popcorn.js](https://gist.github.com/968773) - Controlling a popcorn.js video with an Arduino kit.\n* [Robotic JavaScript](http://jsconf.eu/2010/speaker/livingroombindmotion_function.html) - The first live presentation of the node-serialport code set as presented at JSConf EU 2010.\n* [devicestack](https://github.com/adrai/devicestack) - This module helps you to represent a device and its protocol.\n* [reflecta](https://github.com/jbeavers/reflecta) A communication protocol that combines Arduino Libraries and NodeJS into an integrated system.\n\nFor getting started with node-serialport, we recommend you begin with the following articles:\n\n* [Arduino Node Security Sensor Hacking](http://nexxylove.tumblr.com/post/20159263403/arduino-node-security-sensor-hacking) - A great all around "how do I use this" article.\n* [NodeBots - The Rise of JS Robotics](http://www.voodootikigod.com/nodebots-the-rise-of-js-robotics) - A survey article of why one would want to program robots in JS.\n* [Johnny-Five Getting Started Guide](https://github.com/rwldrn/johnny-five#setup-and-assemble-arduino) - Introduction to using the high level Johnny-Five library (awesome).\n\nHow To Use\n==========\n\nUsing node-serialport is pretty easy because it is pretty basic. It provides you with the building block to make great things, it is not a complete solution - just a cog in the (world domination) machine.\n\nTo Install\n----------\n\nThis assumes you have everything on your system necessary to compile ANY native module for Node.js. This may not be the case, though, so please ensure the following are true for your system before filing an issue about "Does not install". For all operatings systems, please ensure you have Python 2.x installed AND not 3.0, node-gyp (what we use to compile) requires Python 2.x.\n\n### Windows:\n\n * Install Windows 7 or Windows 8.\n * Install [Visual Studio Express 2013 Preview for Windows Desktop](http://www.microsoft.com/visualstudio/eng/2013-downloads#d-2013-express) or [Visual Studio Express 2012 for Windows Desktop](http://www.microsoft.com/visualstudio/eng/products/visual-studio-express-for-windows-desktop).\n * If you are hacking on an Arduino, be sure to install [the drivers](http://arduino.cc/en/Guide/windows#toc4).\n * Install [node.js 0.10.x](http://nodejs.org/) matching the bitness (32 or 64) of your operating system.\n * Install [Python 2.7.5](http://www.python.org/download/releases/2.7.5/) matching the bitness of your operating system.  For any questions, please refer to their [FAQ](http://docs.python.org/2/faq/windows.html). Default settings are perfect.\n * Open the \'Visual Studio Command Prompt\' and add Python to the path.  When installing serialport, you need to tell the build system (known as node-gyp) that you are using a newer compiler by using:\n\n```Batchfile\n   set path=%path%;C:\\Python27\n   npm install serialport --msvs_version=2012\n```\n\nThis switch works for both Visual Studio Express 2012 and 2013.\n\n### Mac OS X:\n\nEnsure that you have at a minimum the xCode Command Line Tools installed appropriate for your system configuration. If you recently upgraded the OS, it probably removed your installation of Command Line Tools, please verify before submitting a ticket.\n\n### Desktop (Debian/Ubuntu) Linux:\n\nYou know what you need for you system, basically your appropriate analog of build-essential. Keep rocking!\n\n\n```\n   sudo apt-get install build-essential\n   npm install serialport\n```\n\n### Raspberry Pi Linux:\n\n * Starting with a a vanilla New Out of the Box Software (NOOBS) Raspbian image (currently tested: 5/25/2013)\n * Log into your Raspberry Pi through whatever means works best and ensure you are on a terminal prompt for the remaining steps. This could be local or through an SSH (or a serial connection if you like).\n * Issue the following commands to ensure you are up to date:\n```\n   sudo apt-get update\n   sudo apt-get upgrade -y\n```\n * Download and install node.js:\n```\n   wget http://nodejs.org/dist/v0.10.12/node-v0.10.12-linux-arm-pi.tar.gz\n   tar xvfz node-v0.10.12-linux-arm-pi.tar.gz\n   sudo mv node-v0.10.12-linux-arm-pi /opt/node/\n```\n * Set up your paths correctly:\n```\n   echo \'export PATH="$PATH:/opt/node/bin"\' >> ~/.bashrc\n   source ~/.bashrc\n```\n * Install using npm, note this will take a while as it is actually compiling code and that ARM processor is getting a workout.\n```\n   npm install serialport\n```\n\nTo Use\n------\n\nOpening a serial port:\n\n```js\nvar SerialPort = require("serialport").SerialPort\nvar serialPort = new SerialPort("/dev/tty-usbserial1", {\n  baudrate: 57600\n});\n```\n  \nWhen opening a serial port, you can specify (in this order).\n\n1. Path to Serial Port - required.\n1. Options - optional and described below.\n\nThe options object allows you to pass named options to the serial port during initialization. The valid attributes for the options object are the following:\n\n* baudrate: Baud Rate, defaults to 9600. Must be one of: 115200, 57600, 38400, 19200, 9600, 4800, 2400, 1800, 1200, 600, 300, 200, 150, 134, 110, 75, or 50.\n* databits: Data Bits, defaults to 8. Must be one of: 8, 7, 6, or 5.\n* stopbits: Stop Bits, defaults to 1. Must be one of: 1 or 2.\n* parity: Parity, defaults to \'none\'. Must be one of: \'none\', \'even\', \'mark\', \'odd\', \'space\'\n* buffersize: Size of read buffer, defaults to 255. Must be an integer value.\n* parser: The parser engine to use with read data, defaults to rawPacket strategy which just emits the raw buffer as a "data" event. Can be any function that accepts EventEmitter as first parameter and the raw buffer as the second parameter.\n\n**Note, we have added support for either all lowercase OR camelcase of the options (thanks @jagautier), use whichever style you prefer.**\n\nopen event\n----------\n\nYou MUST wait for the open event to be emitted before reading/writing to the serial port. The open happens asynchronously so installing \'data\' listeners and writing \nbefore the open event might result in... nothing at all.\n\nAssuming you are connected to a serial console, you would for example:\n\n```js\nserialPort.on("open", function () {\n  console.log(\'open\');\n  serialPort.on(\'data\', function(data) {\n    console.log(\'data received: \' + data);\n  });  \n  serialPort.write("ls\\n", function(err, results) {\n    console.log(\'err \' + err);\n    console.log(\'results \' + results);\n  });  \n});\n```\n\nYou can also call the open function, in this case instanciate the serialport with an additional flag.\n\n```js\nvar SerialPort = require("serialport").SerialPort\nvar serialPort = new SerialPort("/dev/tty-usbserial1", {\n  baudrate: 57600\n}, false); // this is the openImmediately flag [default is true]\n\nserialPort.open(function () {\n  console.log(\'open\');\n  serialPort.on(\'data\', function(data) {\n    console.log(\'data received: \' + data);\n  });  \n  serialPort.write("ls\\n", function(err, results) {\n    console.log(\'err \' + err);\n    console.log(\'results \' + results);\n  });  \n});\n```\n\nList Ports\n----------\n\nYou can also list the ports along with some metadata as well.\n\n```js\nserialport.list(function (err, ports) {\n  ports.forEach(function(port) {\n    console.log(port.comName);\n    console.log(port.pnpId);\n    console.log(port.manufacturer);\n  });\n});\n```\n\nParsers\n-------\n\nOut of the box, node-serialport provides two parsers one that simply emits the raw buffer as a data event and the other which provides familiar "readline" style parsing. To use the readline parser, you must provide a delimiter as such:\n\n```js\nvar serialport = require("serialport");\nvar SerialPort = serialport.SerialPort; // localize object constructor\n\nvar sp = new SerialPort("/dev/tty-usbserial1", { \n  parser: serialport.parsers.readline("\\n") \n});\n```\n\nTo use the raw parser, you just provide the function definition (or leave undefined):\n\n```js\nvar serialport = require("serialport");\nvar SerialPort = serialport.SerialPort; // localize object constructor\n\nvar sp = new SerialPort("/dev/tty-usbserial1", { \n  parser: serialport.parsers.raw\n});\n```\n\n\nYou can get updates of new data from the Serial Port as follows:\n\n```js\nserialPort.on("data", function (data) {\n  sys.puts("here: "+data);\n});\n```\n\nYou can write to the serial port by sending a string or buffer to the write method as follows:\n\n```js\nserialPort.write("OMG IT WORKS\\r");\n```\n\nEnjoy and do cool things with this code.',
120 silly resolved     readmeFilename: 'README.md',
120 silly resolved     _id: 'serialport@1.1.3',
120 silly resolved     _from: 'serialport@1.1.x' },
120 silly resolved   { name: 'async',
120 silly resolved     description: 'Higher-order functions and common patterns for asynchronous code',
120 silly resolved     main: './index',
120 silly resolved     author: { name: 'Caolan McMahon' },
120 silly resolved     version: '0.1.22',
120 silly resolved     repository: { type: 'git', url: 'http://github.com/caolan/async.git' },
120 silly resolved     bugs: { url: 'http://github.com/caolan/async/issues' },
120 silly resolved     licenses: [ [Object] ],
120 silly resolved     devDependencies: { nodeunit: '>0.0.0', 'uglify-js': '1.2.x', nodelint: '>0.0.0' },
120 silly resolved     readme: '# Async.js\n\nAsync is a utility module which provides straight-forward, powerful functions\nfor working with asynchronous JavaScript. Although originally designed for\nuse with [node.js](http://nodejs.org), it can also be used directly in the\nbrowser.\n\nAsync provides around 20 functions that include the usual \'functional\'\nsuspects (map, reduce, filter, forEach…) as well as some common patterns\nfor asynchronous control flow (parallel, series, waterfall…). All these\nfunctions assume you follow the node.js convention of providing a single\ncallback as the last argument of your async function.\n\n\n## Quick Examples\n\n    async.map([\'file1\',\'file2\',\'file3\'], fs.stat, function(err, results){\n        // results is now an array of stats for each file\n    });\n\n    async.filter([\'file1\',\'file2\',\'file3\'], path.exists, function(results){\n        // results now equals an array of the existing files\n    });\n\n    async.parallel([\n        function(){ ... },\n        function(){ ... }\n    ], callback);\n\n    async.series([\n        function(){ ... },\n        function(){ ... }\n    ]);\n\nThere are many more functions available so take a look at the docs below for a\nfull list. This module aims to be comprehensive, so if you feel anything is\nmissing please create a GitHub issue for it.\n\n\n## Download\n\nReleases are available for download from\n[GitHub](http://github.com/caolan/async/downloads).\nAlternatively, you can install using Node Package Manager (npm):\n\n    npm install async\n\n\n__Development:__ [async.js](https://github.com/caolan/async/raw/master/lib/async.js) - 17.5kb Uncompressed\n\n__Production:__ [async.min.js](https://github.com/caolan/async/raw/master/dist/async.min.js) - 1.7kb Packed and Gzipped\n\n\n## In the Browser\n\nSo far its been tested in IE6, IE7, IE8, FF3.6 and Chrome 5. Usage:\n\n    <script type="text/javascript" src="async.js"></script>\n    <script type="text/javascript">\n\n        async.map(data, asyncProcess, function(err, results){\n            alert(results);\n        });\n\n    </script>\n\n\n## Documentation\n\n### Collections\n\n* [forEach](#forEach)\n* [map](#map)\n* [filter](#filter)\n* [reject](#reject)\n* [reduce](#reduce)\n* [detect](#detect)\n* [sortBy](#sortBy)\n* [some](#some)\n* [every](#every)\n* [concat](#concat)\n\n### Control Flow\n\n* [series](#series)\n* [parallel](#parallel)\n* [whilst](#whilst)\n* [until](#until)\n* [waterfall](#waterfall)\n* [queue](#queue)\n* [auto](#auto)\n* [iterator](#iterator)\n* [apply](#apply)\n* [nextTick](#nextTick)\n\n### Utils\n\n* [memoize](#memoize)\n* [unmemoize](#unmemoize)\n* [log](#log)\n* [dir](#dir)\n* [noConflict](#noConflict)\n\n\n## Collections\n\n<a name="forEach" />\n### forEach(arr, iterator, callback)\n\nApplies an iterator function to each item in an array, in parallel.\nThe iterator is called with an item from the list and a callback for when it\nhas finished. If the iterator passes an error to this callback, the main\ncallback for the forEach function is immediately called with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n    // assuming openFiles is an array of file names and saveFile is a function\n    // to save the modified contents of that file:\n\n    async.forEach(openFiles, saveFile, function(err){\n        // if any of the saves produced an error, err would equal that error\n    });\n\n---------------------------------------\n\n<a name="forEachSeries" />\n### forEachSeries(arr, iterator, callback)\n\nThe same as forEach only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. This means the iterator functions will complete in order.\n\n\n---------------------------------------\n\n<a name="forEachLimit" />\n### forEachLimit(arr, limit, iterator, callback)\n\nThe same as forEach only the iterator is applied to batches of items in the\narray, in series. The next batch of iterators is only called once the current\none has completed processing.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - How many items should be in each batch.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n    // Assume documents is an array of JSON objects and requestApi is a\n    // function that interacts with a rate-limited REST api.\n\n    async.forEachLimit(documents, 20, requestApi, function(err){\n        // if any of the saves produced an error, err would equal that error\n    });\n---------------------------------------\n\n<a name="map" />\n### map(arr, iterator, callback)\n\nProduces a new array of values by mapping each value in the given array through\nthe iterator function. The iterator is called with an item from the array and a\ncallback for when it has finished processing. The callback takes 2 arguments, \nan error and the transformed item from the array. If the iterator passes an\nerror to this callback, the main callback for the map function is immediately\ncalled with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order, however\nthe results array will be in the same order as the original array.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n    async.map([\'file1\',\'file2\',\'file3\'], fs.stat, function(err, results){\n        // results is now an array of stats for each file\n    });\n\n---------------------------------------\n\n<a name="mapSeries" />\n### mapSeries(arr, iterator, callback)\n\nThe same as map only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n---------------------------------------\n\n<a name="filter" />\n### filter(arr, iterator, callback)\n\n__Alias:__ select\n\nReturns a new array of all the values which pass an async truth test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. This operation is\nperformed in parallel, but the results array will be in the same order as the\noriginal.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(results) - A callback which is called after all the iterator\n  functions have finished.\n\n__Example__\n\n    async.filter([\'file1\',\'file2\',\'file3\'], path.exists, function(results){\n        // results now equals an array of the existing files\n    });\n\n---------------------------------------\n\n<a name="filterSeries" />\n### filterSeries(arr, iterator, callback)\n\n__alias:__ selectSeries\n\nThe same as filter only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n---------------------------------------\n\n<a name="reject" />\n### reject(arr, iterator, callback)\n\nThe opposite of filter. Removes values that pass an async truth test.\n\n---------------------------------------\n\n<a name="rejectSeries" />\n### rejectSeries(arr, iterator, callback)\n\nThe same as filter, only the iterator is applied to each item in the array\nin series.\n\n\n---------------------------------------\n\n<a name="reduce" />\n### reduce(arr, memo, iterator, callback)\n\n__aliases:__ inject, foldl\n\nReduces a list of values into a single value using an async iterator to return\neach successive step. Memo is the initial state of the reduction. This\nfunction only operates in series. For performance reasons, it may make sense to\nsplit a call to this function into a parallel map, then use the normal\nArray.prototype.reduce on the results. This function is for situations where\neach step in the reduction needs to be async, if you can get the data before\nreducing it then its probably a good idea to do so.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* memo - The initial state of the reduction.\n* iterator(memo, item, callback) - A function applied to each item in the\n  array to produce the next step in the reduction. The iterator is passed a\n  callback which accepts an optional error as its first argument, and the state\n  of the reduction as the second. If an error is passed to the callback, the\n  reduction is stopped and the main callback is immediately called with the\n  error.\n* callback(err, result) - A callback which is called after all the iterator\n  functions have finished. Result is the reduced value.\n\n__Example__\n\n    async.reduce([1,2,3], 0, function(memo, item, callback){\n        // pointless async:\n        process.nextTick(function(){\n            callback(null, memo + item)\n        });\n    }, function(err, result){\n        // result is now equal to the last value of memo, which is 6\n    });\n\n---------------------------------------\n\n<a name="reduceRight" />\n### reduceRight(arr, memo, iterator, callback)\n\n__Alias:__ foldr\n\nSame as reduce, only operates on the items in the array in reverse order.\n\n\n---------------------------------------\n\n<a name="detect" />\n### detect(arr, iterator, callback)\n\nReturns the first value in a list that passes an async truth test. The\niterator is applied in parallel, meaning the first iterator to return true will\nfire the detect callback with that result. That means the result might not be\nthe first item in the original array (in terms of order) that passes the test.\n\nIf order within the original array is important then look at detectSeries.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  the first item in the array that passes the truth test (iterator) or the\n  value undefined if none passed.\n\n__Example__\n\n    async.detect([\'file1\',\'file2\',\'file3\'], path.exists, function(result){\n        // result now equals the first file in the list that exists\n    });\n\n---------------------------------------\n\n<a name="detectSeries" />\n### detectSeries(arr, iterator, callback)\n\nThe same as detect, only the iterator is applied to each item in the array\nin series. This means the result is always the first in the original array (in\nterms of array order) that passes the truth test.\n\n\n---------------------------------------\n\n<a name="sortBy" />\n### sortBy(arr, iterator, callback)\n\nSorts a list by the results of running each value through an async iterator.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a value to use as the sort criteria.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is the items from\n  the original array sorted by the values returned by the iterator calls.\n\n__Example__\n\n    async.sortBy([\'file1\',\'file2\',\'file3\'], function(file, callback){\n        fs.stat(file, function(err, stats){\n            callback(err, stats.mtime);\n        });\n    }, function(err, results){\n        // results is now the original array of files sorted by\n        // modified date\n    });\n\n\n---------------------------------------\n\n<a name="some" />\n### some(arr, iterator, callback)\n\n__Alias:__ any\n\nReturns true if at least one element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. Once any iterator\ncall returns true, the main callback is immediately called.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  either true or false depending on the values of the async tests.\n\n__Example__\n\n    async.some([\'file1\',\'file2\',\'file3\'], path.exists, function(result){\n        // if result is true then at least one of the files exists\n    });\n\n---------------------------------------\n\n<a name="every" />\n### every(arr, iterator, callback)\n\n__Alias:__ all\n\nReturns true if every element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called after all the iterator\n  functions have finished. Result will be either true or false depending on\n  the values of the async tests.\n\n__Example__\n\n    async.every([\'file1\',\'file2\',\'file3\'], path.exists, function(result){\n        // if result is true then every file exists\n    });\n\n---------------------------------------\n\n<a name="concat" />\n### concat(arr, iterator, callback)\n\nApplies an iterator to each item in a list, concatenating the results. Returns the\nconcatenated list. The iterators are called in parallel, and the results are\nconcatenated as they return. There is no guarantee that the results array will\nbe returned in the original order of the arguments passed to the iterator function.\n\n__Arguments__\n\n* arr - An array to iterate over\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and an array of results.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array containing\n  the concatenated results of the iterator function.\n\n__Example__\n\n    async.concat([\'dir1\',\'dir2\',\'dir3\'], fs.readdir, function(err, files){\n        // files is now a list of filenames that exist in the 3 directories\n    });\n\n---------------------------------------\n\n<a name="concatSeries" />\n### concatSeries(arr, iterator, callback)\n\nSame as async.concat, but executes in series instead of parallel.\n\n\n## Control Flow\n\n<a name="series" />\n### series(tasks, [callback])\n\nRun an array of functions in series, each one running once the previous\nfunction has completed. If any functions in the series pass an error to its\ncallback, no more functions are run and the callback for the series is\nimmediately called with the value of the error. Once the tasks have completed,\nthe results are passed to the final callback as an array.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.series.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed\n  a callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n    async.series([\n        function(callback){\n            // do some stuff ...\n            callback(null, \'one\');\n        },\n        function(callback){\n            // do some more stuff ...\n            callback(null, \'two\');\n        },\n    ],\n    // optional callback\n    function(err, results){\n        // results is now equal to [\'one\', \'two\']\n    });\n\n\n    // an example using an object instead of an array\n    async.series({\n        one: function(callback){\n            setTimeout(function(){\n                callback(null, 1);\n            }, 200);\n        },\n        two: function(callback){\n            setTimeout(function(){\n                callback(null, 2);\n            }, 100);\n        },\n    },\n    function(err, results) {\n        // results is now equal to: {one: 1, two: 2}\n    });\n\n\n---------------------------------------\n\n<a name="parallel" />\n### parallel(tasks, [callback])\n\nRun an array of functions in parallel, without waiting until the previous\nfunction has completed. If any of the functions pass an error to its\ncallback, the main callback is immediately called with the value of the error.\nOnce the tasks have completed, the results are passed to the final callback as an\narray.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.parallel.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed a\n  callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n    async.parallel([\n        function(callback){\n            setTimeout(function(){\n                callback(null, \'one\');\n            }, 200);\n        },\n        function(callback){\n            setTimeout(function(){\n                callback(null, \'two\');\n            }, 100);\n        },\n    ],\n    // optional callback\n    function(err, results){\n        // the results array will equal [\'one\',\'two\'] even though\n        // the second function had a shorter timeout.\n    });\n\n\n    // an example using an object instead of an array\n    async.parallel({\n        one: function(callback){\n            setTimeout(function(){\n                callback(null, 1);\n            }, 200);\n        },\n        two: function(callback){\n            setTimeout(function(){\n                callback(null, 2);\n            }, 100);\n        },\n    },\n    function(err, results) {\n        // results is now equals to: {one: 1, two: 2}\n    });\n\n\n---------------------------------------\n\n<a name="whilst" />\n### whilst(test, fn, callback)\n\nRepeatedly call fn, while test returns true. Calls the callback when stopped,\nor an error occurs.\n\n__Arguments__\n\n* test() - synchronous truth test to perform before each execution of fn.\n* fn(callback) - A function to call each time the test passes. The function is\n  passed a callback which must be called once it has completed with an optional\n  error as the first argument.\n* callback(err) - A callback which is called after the test fails and repeated\n  execution of fn has stopped.\n\n__Example__\n\n    var count = 0;\n\n    async.whilst(\n        function () { return count < 5; },\n        function (callback) {\n            count++;\n            setTimeout(callback, 1000);\n        },\n        function (err) {\n            // 5 seconds have passed\n        }\n    );\n\n\n---------------------------------------\n\n<a name="until" />\n### until(test, fn, callback)\n\nRepeatedly call fn, until test returns true. Calls the callback when stopped,\nor an error occurs.\n\nThe inverse of async.whilst.\n\n\n---------------------------------------\n\n<a name="waterfall" />\n### waterfall(tasks, [callback])\n\nRuns an array of functions in series, each passing their results to the next in\nthe array. However, if any of the functions pass an error to the callback, the\nnext function is not executed and the main callback is immediately called with\nthe error.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n* callback(err, [results]) - An optional callback to run once all the functions\n  have completed. This will be passed the results of the last task\'s callback.\n\n\n\n__Example__\n\n    async.waterfall([\n        function(callback){\n            callback(null, \'one\', \'two\');\n        },\n        function(arg1, arg2, callback){\n            callback(null, \'three\');\n        },\n        function(arg1, callback){\n            // arg1 now equals \'three\'\n            callback(null, \'done\');\n        }\n    ], function (err, result) {\n       // result now equals \'done\'    \n    });\n\n\n---------------------------------------\n\n<a name="queue" />\n### queue(worker, concurrency)\n\nCreates a queue object with the specified concurrency. Tasks added to the\nqueue will be processed in parallel (up to the concurrency limit). If all\nworkers are in progress, the task is queued until one is available. Once\na worker has completed a task, the task\'s callback is called.\n\n__Arguments__\n\n* worker(task, callback) - An asynchronous function for processing a queued\n  task.\n* concurrency - An integer for determining how many worker functions should be\n  run in parallel.\n\n__Queue objects__\n\nThe queue object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* concurrency - an integer for determining how many worker functions should be\n  run in parallel. This property can be changed after a queue is created to\n  alter the concurrency on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n    // create a queue object with concurrency 2\n\n    var q = async.queue(function (task, callback) {\n        console.log(\'hello \' + task.name);\n        callback();\n    }, 2);\n\n\n    // assign a callback\n    q.drain = function() {\n        console.log(\'all items have been processed\');\n    }\n\n    // add some items to the queue\n\n    q.push({name: \'foo\'}, function (err) {\n        console.log(\'finished processing foo\');\n    });\n    q.push({name: \'bar\'}, function (err) {\n        console.log(\'finished processing bar\');\n    });\n\n    // add some items to the queue (batch-wise)\n\n    q.push([{name: \'baz\'},{name: \'bay\'},{name: \'bax\'}], function (err) {\n        console.log(\'finished processing bar\');\n    });\n\n\n---------------------------------------\n\n<a name="auto" />\n### auto(tasks, [callback])\n\nDetermines the best order for running functions based on their requirements.\nEach function can optionally depend on other functions being completed first,\nand each function is run as soon as its requirements are satisfied. If any of\nthe functions pass an error to their callback, that function will not complete\n(so any other functions depending on it will not run) and the main callback\nwill be called immediately with the error. Functions also receive an object\ncontaining the results of functions which have completed so far.\n\n__Arguments__\n\n* tasks - An object literal containing named functions or an array of\n  requirements, with the function itself the last item in the array. The key\n  used for each function or array is used when specifying requirements. The\n  syntax is easier to understand by looking at the example.\n* callback(err, results) - An optional callback which is called when all the\n  tasks have been completed. The callback will receive an error as an argument\n  if any tasks pass an error to their callback. If all tasks complete\n  successfully, it will receive an object containing their results.\n\n__Example__\n\n    async.auto({\n        get_data: function(callback){\n            // async code to get some data\n        },\n        make_folder: function(callback){\n            // async code to create a directory to store a file in\n            // this is run at the same time as getting the data\n        },\n        write_file: [\'get_data\', \'make_folder\', function(callback){\n            // once there is some data and the directory exists,\n            // write the data to a file in the directory\n            callback(null, filename);\n        }],\n        email_link: [\'write_file\', function(callback, results){\n            // once the file is written let\'s email a link to it...\n            // results.write_file contains the filename returned by write_file.\n        }]\n    });\n\nThis is a fairly trivial example, but to do this using the basic parallel and\nseries functions would look like this:\n\n    async.parallel([\n        function(callback){\n            // async code to get some data\n        },\n        function(callback){\n            // async code to create a directory to store a file in\n            // this is run at the same time as getting the data\n        }\n    ],\n    function(results){\n        async.series([\n            function(callback){\n                // once there is some data and the directory exists,\n                // write the data to a file in the directory\n            },\n            email_link: function(callback){\n                // once the file is written let\'s email a link to it...\n            }\n        ]);\n    });\n\nFor a complicated series of async tasks using the auto function makes adding\nnew tasks much easier and makes the code more readable.\n\n\n---------------------------------------\n\n<a name="iterator" />\n### iterator(tasks)\n\nCreates an iterator function which calls the next function in the array,\nreturning a continuation to call the next one after that. Its also possible to\n\'peek\' the next iterator by doing iterator.next().\n\nThis function is used internally by the async module but can be useful when\nyou want to manually control the flow of functions in series.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n\n__Example__\n\n    var iterator = async.iterator([\n        function(){ sys.p(\'one\'); },\n        function(){ sys.p(\'two\'); },\n        function(){ sys.p(\'three\'); }\n    ]);\n\n    node> var iterator2 = iterator();\n    \'one\'\n    node> var iterator3 = iterator2();\n    \'two\'\n    node> iterator3();\n    \'three\'\n    node> var nextfn = iterator2.next();\n    node> nextfn();\n    \'three\'\n\n\n---------------------------------------\n\n<a name="apply" />\n### apply(function, arguments..)\n\nCreates a continuation function with some arguments already applied, a useful\nshorthand when combined with other control flow functions. Any arguments\npassed to the returned function are added to the arguments originally passed\nto apply.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to automatically apply when the\n  continuation is called.\n\n__Example__\n\n    // using apply\n\n    async.parallel([\n        async.apply(fs.writeFile, \'testfile1\', \'test1\'),\n        async.apply(fs.writeFile, \'testfile2\', \'test2\'),\n    ]);\n\n\n    // the same process without using apply\n\n    async.parallel([\n        function(callback){\n            fs.writeFile(\'testfile1\', \'test1\', callback);\n        },\n        function(callback){\n            fs.writeFile(\'testfile2\', \'test2\', callback);\n        },\n    ]);\n\nIt\'s possible to pass any number of additional arguments when calling the\ncontinuation:\n\n    node> var fn = async.apply(sys.puts, \'one\');\n    node> fn(\'two\', \'three\');\n    one\n    two\n    three\n\n---------------------------------------\n\n<a name="nextTick" />\n### nextTick(callback)\n\nCalls the callback on a later loop around the event loop. In node.js this just\ncalls process.nextTick, in the browser it falls back to setTimeout(callback, 0),\nwhich means other higher priority events may precede the execution of the callback.\n\nThis is used internally for browser-compatibility purposes.\n\n__Arguments__\n\n* callback - The function to call on a later loop around the event loop.\n\n__Example__\n\n    var call_order = [];\n    async.nextTick(function(){\n        call_order.push(\'two\');\n        // call_order now equals [\'one\',\'two]\n    });\n    call_order.push(\'one\')\n\n\n## Utils\n\n<a name="memoize" />\n### memoize(fn, [hasher])\n\nCaches the results of an async function. When creating a hash to store function\nresults against, the callback is omitted from the hash and an optional hash\nfunction can be used.\n\n__Arguments__\n\n* fn - the function you to proxy and cache results from.\n* hasher - an optional function for generating a custom hash for storing\n  results, it has all the arguments applied to it apart from the callback, and\n  must be synchronous.\n\n__Example__\n\n    var slow_fn = function (name, callback) {\n        // do something\n        callback(null, result);\n    };\n    var fn = async.memoize(slow_fn);\n\n    // fn can now be used as if it were slow_fn\n    fn(\'some name\', function () {\n        // callback\n    });\n\n<a name="unmemoize" />\n### unmemoize(fn)\n\nUndoes a memoized function, reverting it to the original, unmemoized\nform. Comes handy in tests.\n\n__Arguments__\n\n* fn - the memoized function\n\n<a name="log" />\n### log(function, arguments)\n\nLogs the result of an async function to the console. Only works in node.js or\nin browsers that support console.log and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.log is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n    var hello = function(name, callback){\n        setTimeout(function(){\n            callback(null, \'hello \' + name);\n        }, 1000);\n    };\n\n    node> async.log(hello, \'world\');\n    \'hello world\'\n\n\n---------------------------------------\n\n<a name="dir" />\n### dir(function, arguments)\n\nLogs the result of an async function to the console using console.dir to\ndisplay the properties of the resulting object. Only works in node.js or\nin browsers that support console.dir and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.dir is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n    var hello = function(name, callback){\n        setTimeout(function(){\n            callback(null, {hello: name});\n        }, 1000);\n    };\n\n    node> async.dir(hello, \'world\');\n    {hello: \'world\'}\n\n\n---------------------------------------\n\n<a name="noConflict" />\n### noConflict()\n\nChanges the value of async back to its original value, returning a reference to the\nasync object.\n',
120 silly resolved     readmeFilename: 'README.md',
120 silly resolved     _id: 'async@0.1.22',
120 silly resolved     _from: 'async@0.1.x' } ]
121 info install serialport@1.1.3 into /home/node/repository/webapp/node_modules/svd-xbee
122 info install async@0.1.22 into /home/node/repository/webapp/node_modules/svd-xbee
123 info installOne serialport@1.1.3
124 info installOne async@0.1.22
125 verbose from cache /home/node/.npm/serialport/1.1.3/package/package.json
126 verbose from cache /home/node/.npm/async/0.1.22/package/package.json
127 info /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport unbuild
128 verbose read json /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/package.json
129 info /home/node/repository/webapp/node_modules/svd-xbee/node_modules/async unbuild
130 verbose read json /home/node/repository/webapp/node_modules/svd-xbee/node_modules/async/package.json
131 verbose tar unpack /home/node/.npm/serialport/1.1.3/package.tgz
132 verbose tar unpack /home/node/.npm/async/0.1.22/package.tgz
133 silly lockFile 333108db-svd-xbee-node-modules-serialport /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport
134 verbose lock /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport /home/node/.npm/333108db-svd-xbee-node-modules-serialport.lock
135 silly lockFile 15d16831-npm-serialport-1-1-3-package-tgz /home/node/.npm/serialport/1.1.3/package.tgz
136 verbose lock /home/node/.npm/serialport/1.1.3/package.tgz /home/node/.npm/15d16831-npm-serialport-1-1-3-package-tgz.lock
137 silly lockFile c0cc249d-ules-svd-xbee-node-modules-async /home/node/repository/webapp/node_modules/svd-xbee/node_modules/async
138 verbose lock /home/node/repository/webapp/node_modules/svd-xbee/node_modules/async /home/node/.npm/c0cc249d-ules-svd-xbee-node-modules-async.lock
139 silly lockFile 6b89619c-ode-npm-async-0-1-22-package-tgz /home/node/.npm/async/0.1.22/package.tgz
140 verbose lock /home/node/.npm/async/0.1.22/package.tgz /home/node/.npm/6b89619c-ode-npm-async-0-1-22-package-tgz.lock
141 silly gunzTarPerm modes [ '755', '644' ]
142 silly gunzTarPerm modes [ '755', '644' ]
143 silly gunzTarPerm extractEntry package.json
144 silly gunzTarPerm extractEntry package.json
145 silly gunzTarPerm extractEntry .npmignore
146 silly gunzTarPerm extractEntry README.md
147 silly gunzTarPerm extractEntry .npmignore
148 silly gunzTarPerm extractEntry README.md
149 silly gunzTarPerm extractEntry LICENSE
150 silly gunzTarPerm extractEntry serialport.js
151 silly gunzTarPerm extractEntry LICENSE
152 silly gunzTarPerm extractEntry index.js
153 silly gunzTarPerm extractEntry build/Release/obj.target/serialport/src/serialport.o
154 silly gunzTarPerm extractEntry .gitmodules
155 silly gunzTarPerm extractEntry Makefile
156 silly gunzTarPerm extractEntry lib/async.js
157 silly gunzTarPerm extractEntry build/Release/obj.target/serialport/src/serialport_unix.o
158 silly gunzTarPerm extractEntry build/Release/linker.lock
159 silly gunzTarPerm extractEntry build/Release/.deps/Release/serialport.node.d
160 silly gunzTarPerm extractEntry build/Release/.deps/Release/obj.target/serialport/src/serialport.o.d
161 silly gunzTarPerm extractEntry build/Release/.deps/Release/obj.target/serialport/src/serialport_unix.o.d
162 silly gunzTarPerm extractEntry build/serialport.target.mk
163 silly gunzTarPerm extractEntry build/gyp-mac-tool
164 silly gunzTarPerm extractEntry build/config.gypi
165 silly gunzTarPerm extractEntry build/binding.Makefile
166 silly gunzTarPerm extractEntry build/Makefile
167 silly gunzTarPerm extractEntry tests/test_read.js
168 silly gunzTarPerm extractEntry tests/test_write.js
169 silly gunzTarPerm extractEntry tests/test_zwave.js
170 silly gunzTarPerm extractEntry tests/echoTest.js
171 silly gunzTarPerm extractEntry tests/arduino-ldr-read.js
172 silly gunzTarPerm extractEntry tests/arduino-ldr-read.pde
173 silly gunzTarPerm extractEntry tests/arduinioEcho/arduinioEcho.ino
174 silly gunzTarPerm extractEntry binding.gyp
175 silly gunzTarPerm extractEntry bin/serialportList.js
176 silly gunzTarPerm extractEntry bin/serialportTerminal.js
177 silly gunzTarPerm extractEntry test/echoTest.js
178 silly gunzTarPerm extractEntry test/echo/echo.ino
179 silly gunzTarPerm extractEntry changelog.md
180 silly gunzTarPerm extractEntry AUTHORS
181 silly gunzTarPerm extractEntry examples/readdata.js
182 silly gunzTarPerm extractEntry examples/logger.js
183 silly gunzTarPerm extractEntry src/serialport.h
184 silly gunzTarPerm extractEntry src/win/disphelper.h
185 silly gunzTarPerm extractEntry src/win/AutoHeapAlloc.h
186 silly gunzTarPerm extractEntry src/win/AutoHandle.h
187 silly gunzTarPerm extractEntry src/win/enumser.cpp
188 silly gunzTarPerm extractEntry src/win/AutoHModule.h
189 silly gunzTarPerm extractEntry src/win/enumser.h
190 verbose read json /home/node/repository/webapp/node_modules/svd-xbee/node_modules/async/package.json
191 silly gunzTarPerm extractEntry src/win/disphelper.c
192 silly gunzTarPerm extractEntry src/win/stdafx.h
193 silly gunzTarPerm extractEntry src/win/stdstring.h
194 silly lockFile c0cc249d-ules-svd-xbee-node-modules-async /home/node/repository/webapp/node_modules/svd-xbee/node_modules/async
195 silly lockFile c0cc249d-ules-svd-xbee-node-modules-async /home/node/repository/webapp/node_modules/svd-xbee/node_modules/async
196 silly lockFile 6b89619c-ode-npm-async-0-1-22-package-tgz /home/node/.npm/async/0.1.22/package.tgz
197 silly lockFile 6b89619c-ode-npm-async-0-1-22-package-tgz /home/node/.npm/async/0.1.22/package.tgz
198 info preinstall async@0.1.22
199 silly gunzTarPerm extractEntry src/serialport_win.cpp
200 verbose from cache /home/node/repository/webapp/node_modules/svd-xbee/node_modules/async/package.json
201 silly gunzTarPerm extractEntry src/serialport_unix.cpp
202 silly gunzTarPerm extractEntry src/serialport.cpp
203 verbose read json /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/package.json
204 silly lockFile 333108db-svd-xbee-node-modules-serialport /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport
205 silly lockFile 333108db-svd-xbee-node-modules-serialport /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport
206 silly lockFile 15d16831-npm-serialport-1-1-3-package-tgz /home/node/.npm/serialport/1.1.3/package.tgz
207 silly lockFile 15d16831-npm-serialport-1-1-3-package-tgz /home/node/.npm/serialport/1.1.3/package.tgz
208 info preinstall serialport@1.1.3
209 verbose from cache /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/package.json
210 verbose readDependencies using package.json deps
211 verbose from cache /home/node/repository/webapp/node_modules/svd-xbee/node_modules/async/package.json
212 verbose readDependencies using package.json deps
213 verbose from cache /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/package.json
214 verbose readDependencies using package.json deps
215 silly resolved []
216 verbose about to build /home/node/repository/webapp/node_modules/svd-xbee/node_modules/async
217 info build /home/node/repository/webapp/node_modules/svd-xbee/node_modules/async
218 verbose from cache /home/node/repository/webapp/node_modules/svd-xbee/node_modules/async/package.json
219 verbose readDependencies using package.json deps
220 verbose linkStuff [ false,
220 verbose linkStuff   false,
220 verbose linkStuff   false,
220 verbose linkStuff   '/home/node/repository/webapp/node_modules/svd-xbee/node_modules' ]
221 info linkStuff async@0.1.22
222 verbose linkBins async@0.1.22
223 verbose linkMans async@0.1.22
224 verbose rebuildBundles async@0.1.22
225 verbose cache add [ 'bindings@1.1.0', null ]
226 verbose cache add name=undefined spec="bindings@1.1.0" args=["bindings@1.1.0",null]
227 verbose parsed url { pathname: 'bindings@1.1.0',
227 verbose parsed url   path: 'bindings@1.1.0',
227 verbose parsed url   href: 'bindings@1.1.0' }
228 verbose cache add name="bindings" spec="1.1.0" args=["bindings","1.1.0"]
229 verbose parsed url { pathname: '1.1.0', path: '1.1.0', href: '1.1.0' }
230 verbose addNamed [ 'bindings', '1.1.0' ]
231 verbose addNamed [ '1.1.0', '1.1.0' ]
232 silly lockFile ff2d1960-bindings-1-1-0 bindings@1.1.0
233 verbose lock bindings@1.1.0 /home/node/.npm/ff2d1960-bindings-1-1-0.lock
234 verbose cache add [ 'async@0.1.18', null ]
235 verbose cache add name=undefined spec="async@0.1.18" args=["async@0.1.18",null]
236 verbose parsed url { pathname: 'async@0.1.18',
236 verbose parsed url   path: 'async@0.1.18',
236 verbose parsed url   href: 'async@0.1.18' }
237 verbose cache add name="async" spec="0.1.18" args=["async","0.1.18"]
238 verbose parsed url { pathname: '0.1.18', path: '0.1.18', href: '0.1.18' }
239 verbose addNamed [ 'async', '0.1.18' ]
240 verbose addNamed [ '0.1.18', '0.1.18' ]
241 silly lockFile b86dcd49-async-0-1-18 async@0.1.18
242 verbose lock async@0.1.18 /home/node/.npm/b86dcd49-async-0-1-18.lock
243 verbose cache add [ 'sf@0.1.6', null ]
244 verbose cache add name=undefined spec="sf@0.1.6" args=["sf@0.1.6",null]
245 verbose parsed url { pathname: 'sf@0.1.6', path: 'sf@0.1.6', href: 'sf@0.1.6' }
246 verbose cache add name="sf" spec="0.1.6" args=["sf","0.1.6"]
247 verbose parsed url { pathname: '0.1.6', path: '0.1.6', href: '0.1.6' }
248 verbose addNamed [ 'sf', '0.1.6' ]
249 verbose addNamed [ '0.1.6', '0.1.6' ]
250 silly lockFile cae65a0c-sf-0-1-6 sf@0.1.6
251 verbose lock sf@0.1.6 /home/node/.npm/cae65a0c-sf-0-1-6.lock
252 verbose cache add [ 'optimist@~0.3.4', null ]
253 verbose cache add name=undefined spec="optimist@~0.3.4" args=["optimist@~0.3.4",null]
254 verbose parsed url { pathname: 'optimist@~0.3.4',
254 verbose parsed url   path: 'optimist@~0.3.4',
254 verbose parsed url   href: 'optimist@~0.3.4' }
255 verbose cache add name="optimist" spec="~0.3.4" args=["optimist","~0.3.4"]
256 verbose parsed url { pathname: '~0.3.4', path: '~0.3.4', href: '~0.3.4' }
257 verbose addNamed [ 'optimist', '~0.3.4' ]
258 verbose addNamed [ null, '>=0.3.4- <0.4.0-' ]
259 silly lockFile 094c60bd-optimist-0-3-4 optimist@~0.3.4
260 verbose lock optimist@~0.3.4 /home/node/.npm/094c60bd-optimist-0-3-4.lock
261 info install async@0.1.22
262 silly addNameRange { name: 'optimist', range: '>=0.3.4- <0.4.0-', hasData: false }
263 info postinstall async@0.1.22
264 verbose registry.get bindings/1.1.0 not expired, no request
265 verbose registry.get async/0.1.18 not expired, no request
266 verbose registry.get sf/0.1.6 not expired, no request
267 verbose registry.get optimist not expired, no request
268 silly addNameRange number 2 { name: 'optimist', range: '>=0.3.4- <0.4.0-', hasData: true }
269 silly addNameRange versions [ 'optimist',
269 silly addNameRange   [ '0.0.1',
269 silly addNameRange     '0.0.2',
269 silly addNameRange     '0.0.4',
269 silly addNameRange     '0.0.5',
269 silly addNameRange     '0.0.6',
269 silly addNameRange     '0.0.7',
269 silly addNameRange     '0.1.0',
269 silly addNameRange     '0.1.1',
269 silly addNameRange     '0.1.2',
269 silly addNameRange     '0.1.3',
269 silly addNameRange     '0.1.4',
269 silly addNameRange     '0.1.5',
269 silly addNameRange     '0.1.6',
269 silly addNameRange     '0.1.7',
269 silly addNameRange     '0.1.8',
269 silly addNameRange     '0.1.9',
269 silly addNameRange     '0.0.3',
269 silly addNameRange     '0.2.0',
269 silly addNameRange     '0.2.1',
269 silly addNameRange     '0.2.2',
269 silly addNameRange     '0.2.3',
269 silly addNameRange     '0.2.4',
269 silly addNameRange     '0.2.5',
269 silly addNameRange     '0.2.6',
269 silly addNameRange     '0.2.7',
269 silly addNameRange     '0.2.8',
269 silly addNameRange     '0.3.0',
269 silly addNameRange     '0.3.1',
269 silly addNameRange     '0.3.3',
269 silly addNameRange     '0.3.4',
269 silly addNameRange     '0.3.5',
269 silly addNameRange     '0.3.6',
269 silly addNameRange     '0.3.7',
269 silly addNameRange     '0.4.0',
269 silly addNameRange     '0.5.0',
269 silly addNameRange     '0.5.1',
269 silly addNameRange     '0.5.2',
269 silly addNameRange     '0.6.0' ] ]
270 verbose addNamed [ 'optimist', '0.3.7' ]
271 verbose addNamed [ '0.3.7', '0.3.7' ]
272 silly lockFile 090e1d8d-optimist-0-3-7 optimist@0.3.7
273 verbose lock optimist@0.3.7 /home/node/.npm/090e1d8d-optimist-0-3-7.lock
274 verbose read json /home/node/.npm/bindings/1.1.0/package/package.json
275 verbose read json /home/node/.npm/async/0.1.18/package/package.json
276 verbose read json /home/node/.npm/sf/0.1.6/package/package.json
277 verbose read json /home/node/.npm/optimist/0.3.7/package/package.json
278 silly lockFile ff2d1960-bindings-1-1-0 bindings@1.1.0
279 silly lockFile ff2d1960-bindings-1-1-0 bindings@1.1.0
280 silly lockFile b86dcd49-async-0-1-18 async@0.1.18
281 silly lockFile b86dcd49-async-0-1-18 async@0.1.18
282 silly lockFile cae65a0c-sf-0-1-6 sf@0.1.6
283 silly lockFile cae65a0c-sf-0-1-6 sf@0.1.6
284 silly lockFile 090e1d8d-optimist-0-3-7 optimist@0.3.7
285 silly lockFile 090e1d8d-optimist-0-3-7 optimist@0.3.7
286 silly lockFile 094c60bd-optimist-0-3-4 optimist@~0.3.4
287 silly lockFile 094c60bd-optimist-0-3-4 optimist@~0.3.4
288 silly resolved [ { name: 'bindings',
288 silly resolved     description: 'Helper module for loading your native module\'s .node file',
288 silly resolved     keywords: [ 'native', 'addon', 'bindings', 'gyp', 'waf', 'c', 'c++' ],
288 silly resolved     version: '1.1.0',
288 silly resolved     author:
288 silly resolved      { name: 'Nathan Rajlich',
288 silly resolved        email: 'nathan@tootallnate.net',
288 silly resolved        url: 'http://tootallnate.net' },
288 silly resolved     repository:
288 silly resolved      { type: 'git',
288 silly resolved        url: 'git://github.com/TooTallNate/node-bindings.git' },
288 silly resolved     main: './bindings.js',
288 silly resolved     readme: 'node-bindings\n=============\n### Helper module for loading your native module\'s .node file\n\nThis is a helper module for authors of Node.js native addon modules.\nIt is basically the "swiss army knife" of `require()`ing your native module\'s\n`.node` file.\n\nThroughout the course of Node\'s native addon history, addons have ended up being\ncompiled in a variety of different places, depending on which build tool and which\nversion of node was used. To make matters worse, now the _gyp_ build tool can\nproduce either a _Release_ or _Debug_ build, each being built into different\nlocations.\n\nThis module checks _all_ the possible locations that a native addon would be built\nat, and returns the first one that loads successfully.\n\n\nInstallation\n------------\n\nInstall with `npm`:\n\n``` bash\n$ npm install bindings\n```\n\nOr add it to the `"dependencies"` section of your _package.json_ file.\n\n\nExample\n-------\n\n`require()`ing the proper bindings file for the current node version, platform\nand architecture is as simple as:\n\n``` js\nvar bindings = require(\'bindings\')(\'binding.node\')\n\n// Use your bindings defined in your C files\nbindings.your_c_function()\n```\n\n\nNice Error Output\n-----------------\n\nWhen the `.node` file could not be loaded, `node-bindings` throws an Error with\na nice error message telling you exactly what was tried. You can also check the\n`err.tries` Array property.\n\n```\nError: Could not load the bindings file. Tried:\n → /Users/nrajlich/ref/build/binding.node\n → /Users/nrajlich/ref/build/Debug/binding.node\n → /Users/nrajlich/ref/build/Release/binding.node\n → /Users/nrajlich/ref/out/Debug/binding.node\n → /Users/nrajlich/ref/Debug/binding.node\n → /Users/nrajlich/ref/out/Release/binding.node\n → /Users/nrajlich/ref/Release/binding.node\n → /Users/nrajlich/ref/build/default/binding.node\n → /Users/nrajlich/ref/compiled/0.8.2/darwin/x64/binding.node\n    at bindings (/Users/nrajlich/ref/node_modules/bindings/bindings.js:84:13)\n    at Object.<anonymous> (/Users/nrajlich/ref/lib/ref.js:5:47)\n    at Module._compile (module.js:449:26)\n    at Object.Module._extensions..js (module.js:467:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\n    ...\n```\n\n\nLicense\n-------\n\n(The MIT License)\n\nCopyright (c) 2012 Nathan Rajlich &lt;nathan@tootallnate.net&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\'Software\'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \'AS IS\', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n',
288 silly resolved     readmeFilename: 'README.md',
288 silly resolved     _id: 'bindings@1.1.0',
288 silly resolved     _from: 'bindings@1.1.0' },
288 silly resolved   { name: 'async',
288 silly resolved     description: 'Higher-order functions and common patterns for asynchronous code',
288 silly resolved     main: './index',
288 silly resolved     author: { name: 'Caolan McMahon' },
288 silly resolved     version: '0.1.18',
288 silly resolved     repository: { type: 'git', url: 'http://github.com/caolan/async.git' },
288 silly resolved     bugs: { url: 'http://github.com/caolan/async/issues' },
288 silly resolved     licenses: [ [Object] ],
288 silly resolved     devDependencies: { nodeunit: '>0.0.0', 'uglify-js': '1.2.x', nodelint: '>0.0.0' },
288 silly resolved     readme: '# Async.js\n\nAsync is a utility module which provides straight-forward, powerful functions\nfor working with asynchronous JavaScript. Although originally designed for\nuse with [node.js](http://nodejs.org), it can also be used directly in the\nbrowser.\n\nAsync provides around 20 functions that include the usual \'functional\'\nsuspects (map, reduce, filter, forEach…) as well as some common patterns\nfor asynchronous control flow (parallel, series, waterfall…). All these\nfunctions assume you follow the node.js convention of providing a single\ncallback as the last argument of your async function.\n\n\n## Quick Examples\n\n    async.map([\'file1\',\'file2\',\'file3\'], fs.stat, function(err, results){\n        // results is now an array of stats for each file\n    });\n\n    async.filter([\'file1\',\'file2\',\'file3\'], path.exists, function(results){\n        // results now equals an array of the existing files\n    });\n\n    async.parallel([\n        function(){ ... },\n        function(){ ... }\n    ], callback);\n\n    async.series([\n        function(){ ... },\n        function(){ ... }\n    ]);\n\nThere are many more functions available so take a look at the docs below for a\nfull list. This module aims to be comprehensive, so if you feel anything is\nmissing please create a GitHub issue for it.\n\n\n## Download\n\nReleases are available for download from\n[GitHub](http://github.com/caolan/async/downloads).\nAlternatively, you can install using Node Package Manager (npm):\n\n    npm install async\n\n\n__Development:__ [async.js](https://github.com/caolan/async/raw/master/lib/async.js) - 17.5kb Uncompressed\n\n__Production:__ [async.min.js](https://github.com/caolan/async/raw/master/dist/async.min.js) - 1.7kb Packed and Gzipped\n\n\n## In the Browser\n\nSo far its been tested in IE6, IE7, IE8, FF3.6 and Chrome 5. Usage:\n\n    <script type="text/javascript" src="async.js"></script>\n    <script type="text/javascript">\n\n        async.map(data, asyncProcess, function(err, results){\n            alert(results);\n        });\n\n    </script>\n\n\n## Documentation\n\n### Collections\n\n* [forEach](#forEach)\n* [map](#map)\n* [filter](#filter)\n* [reject](#reject)\n* [reduce](#reduce)\n* [detect](#detect)\n* [sortBy](#sortBy)\n* [some](#some)\n* [every](#every)\n* [concat](#concat)\n\n### Control Flow\n\n* [series](#series)\n* [parallel](#parallel)\n* [whilst](#whilst)\n* [until](#until)\n* [waterfall](#waterfall)\n* [queue](#queue)\n* [auto](#auto)\n* [iterator](#iterator)\n* [apply](#apply)\n* [nextTick](#nextTick)\n\n### Utils\n\n* [memoize](#memoize)\n* [unmemoize](#unmemoize)\n* [log](#log)\n* [dir](#dir)\n* [noConflict](#noConflict)\n\n\n## Collections\n\n<a name="forEach" />\n### forEach(arr, iterator, callback)\n\nApplies an iterator function to each item in an array, in parallel.\nThe iterator is called with an item from the list and a callback for when it\nhas finished. If the iterator passes an error to this callback, the main\ncallback for the forEach function is immediately called with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n    // assuming openFiles is an array of file names and saveFile is a function\n    // to save the modified contents of that file:\n\n    async.forEach(openFiles, saveFile, function(err){\n        // if any of the saves produced an error, err would equal that error\n    });\n\n---------------------------------------\n\n<a name="forEachSeries" />\n### forEachSeries(arr, iterator, callback)\n\nThe same as forEach only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. This means the iterator functions will complete in order.\n\n\n---------------------------------------\n\n<a name="forEachLimit" />\n### forEachLimit(arr, limit, iterator, callback)\n\nThe same as forEach only the iterator is applied to batches of items in the\narray, in series. The next batch of iterators is only called once the current\none has completed processing.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - How many items should be in each batch.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n    // Assume documents is an array of JSON objects and requestApi is a\n    // function that interacts with a rate-limited REST api.\n\n    async.forEachLimit(documents, 20, requestApi, function(err){\n        // if any of the saves produced an error, err would equal that error\n    });\n---------------------------------------\n\n<a name="map" />\n### map(arr, iterator, callback)\n\nProduces a new array of values by mapping each value in the given array through\nthe iterator function. The iterator is called with an item from the array and a\ncallback for when it has finished processing. The callback takes 2 arguments, \nan error and the transformed item from the array. If the iterator passes an\nerror to this callback, the main callback for the map function is immediately\ncalled with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order, however\nthe results array will be in the same order as the original array.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n    async.map([\'file1\',\'file2\',\'file3\'], fs.stat, function(err, results){\n        // results is now an array of stats for each file\n    });\n\n---------------------------------------\n\n<a name="mapSeries" />\n### mapSeries(arr, iterator, callback)\n\nThe same as map only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n---------------------------------------\n\n<a name="filter" />\n### filter(arr, iterator, callback)\n\n__Alias:__ select\n\nReturns a new array of all the values which pass an async truth test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. This operation is\nperformed in parallel, but the results array will be in the same order as the\noriginal.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(results) - A callback which is called after all the iterator\n  functions have finished.\n\n__Example__\n\n    async.filter([\'file1\',\'file2\',\'file3\'], path.exists, function(results){\n        // results now equals an array of the existing files\n    });\n\n---------------------------------------\n\n<a name="filterSeries" />\n### filterSeries(arr, iterator, callback)\n\n__alias:__ selectSeries\n\nThe same as filter only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n---------------------------------------\n\n<a name="reject" />\n### reject(arr, iterator, callback)\n\nThe opposite of filter. Removes values that pass an async truth test.\n\n---------------------------------------\n\n<a name="rejectSeries" />\n### rejectSeries(arr, iterator, callback)\n\nThe same as filter, only the iterator is applied to each item in the array\nin series.\n\n\n---------------------------------------\n\n<a name="reduce" />\n### reduce(arr, memo, iterator, callback)\n\n__aliases:__ inject, foldl\n\nReduces a list of values into a single value using an async iterator to return\neach successive step. Memo is the initial state of the reduction. This\nfunction only operates in series. For performance reasons, it may make sense to\nsplit a call to this function into a parallel map, then use the normal\nArray.prototype.reduce on the results. This function is for situations where\neach step in the reduction needs to be async, if you can get the data before\nreducing it then its probably a good idea to do so.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* memo - The initial state of the reduction.\n* iterator(memo, item, callback) - A function applied to each item in the\n  array to produce the next step in the reduction. The iterator is passed a\n  callback which accepts an optional error as its first argument, and the state\n  of the reduction as the second. If an error is passed to the callback, the\n  reduction is stopped and the main callback is immediately called with the\n  error.\n* callback(err, result) - A callback which is called after all the iterator\n  functions have finished. Result is the reduced value.\n\n__Example__\n\n    async.reduce([1,2,3], 0, function(memo, item, callback){\n        // pointless async:\n        process.nextTick(function(){\n            callback(null, memo + item)\n        });\n    }, function(err, result){\n        // result is now equal to the last value of memo, which is 6\n    });\n\n---------------------------------------\n\n<a name="reduceRight" />\n### reduceRight(arr, memo, iterator, callback)\n\n__Alias:__ foldr\n\nSame as reduce, only operates on the items in the array in reverse order.\n\n\n---------------------------------------\n\n<a name="detect" />\n### detect(arr, iterator, callback)\n\nReturns the first value in a list that passes an async truth test. The\niterator is applied in parallel, meaning the first iterator to return true will\nfire the detect callback with that result. That means the result might not be\nthe first item in the original array (in terms of order) that passes the test.\n\nIf order within the original array is important then look at detectSeries.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  the first item in the array that passes the truth test (iterator) or the\n  value undefined if none passed.\n\n__Example__\n\n    async.detect([\'file1\',\'file2\',\'file3\'], path.exists, function(result){\n        // result now equals the first file in the list that exists\n    });\n\n---------------------------------------\n\n<a name="detectSeries" />\n### detectSeries(arr, iterator, callback)\n\nThe same as detect, only the iterator is applied to each item in the array\nin series. This means the result is always the first in the original array (in\nterms of array order) that passes the truth test.\n\n\n---------------------------------------\n\n<a name="sortBy" />\n### sortBy(arr, iterator, callback)\n\nSorts a list by the results of running each value through an async iterator.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a value to use as the sort criteria.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is the items from\n  the original array sorted by the values returned by the iterator calls.\n\n__Example__\n\n    async.sortBy([\'file1\',\'file2\',\'file3\'], function(file, callback){\n        fs.stat(file, function(err, stats){\n            callback(err, stats.mtime);\n        });\n    }, function(err, results){\n        // results is now the original array of files sorted by\n        // modified date\n    });\n\n\n---------------------------------------\n\n<a name="some" />\n### some(arr, iterator, callback)\n\n__Alias:__ any\n\nReturns true if at least one element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. Once any iterator\ncall returns true, the main callback is immediately called.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  either true or false depending on the values of the async tests.\n\n__Example__\n\n    async.some([\'file1\',\'file2\',\'file3\'], path.exists, function(result){\n        // if result is true then at least one of the files exists\n    });\n\n---------------------------------------\n\n<a name="every" />\n### every(arr, iterator, callback)\n\n__Alias:__ all\n\nReturns true if every element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called after all the iterator\n  functions have finished. Result will be either true or false depending on\n  the values of the async tests.\n\n__Example__\n\n    async.every([\'file1\',\'file2\',\'file3\'], path.exists, function(result){\n        // if result is true then every file exists\n    });\n\n---------------------------------------\n\n<a name="concat" />\n### concat(arr, iterator, callback)\n\nApplies an iterator to each item in a list, concatenating the results. Returns the\nconcatenated list. The iterators are called in parallel, and the results are\nconcatenated as they return. There is no guarantee that the results array will\nbe returned in the original order of the arguments passed to the iterator function.\n\n__Arguments__\n\n* arr - An array to iterate over\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and an array of results.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array containing\n  the concatenated results of the iterator function.\n\n__Example__\n\n    async.concat([\'dir1\',\'dir2\',\'dir3\'], fs.readdir, function(err, files){\n        // files is now a list of filenames that exist in the 3 directories\n    });\n\n---------------------------------------\n\n<a name="concatSeries" />\n### concatSeries(arr, iterator, callback)\n\nSame as async.concat, but executes in series instead of parallel.\n\n\n## Control Flow\n\n<a name="series" />\n### series(tasks, [callback])\n\nRun an array of functions in series, each one running once the previous\nfunction has completed. If any functions in the series pass an error to its\ncallback, no more functions are run and the callback for the series is\nimmediately called with the value of the error. Once the tasks have completed,\nthe results are passed to the final callback as an array.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.series.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed\n  a callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n    async.series([\n        function(callback){\n            // do some stuff ...\n            callback(null, \'one\');\n        },\n        function(callback){\n            // do some more stuff ...\n            callback(null, \'two\');\n        },\n    ],\n    // optional callback\n    function(err, results){\n        // results is now equal to [\'one\', \'two\']\n    });\n\n\n    // an example using an object instead of an array\n    async.series({\n        one: function(callback){\n            setTimeout(function(){\n                callback(null, 1);\n            }, 200);\n        },\n        two: function(callback){\n            setTimeout(function(){\n                callback(null, 2);\n            }, 100);\n        },\n    },\n    function(err, results) {\n        // results is now equal to: {one: 1, two: 2}\n    });\n\n\n---------------------------------------\n\n<a name="parallel" />\n### parallel(tasks, [callback])\n\nRun an array of functions in parallel, without waiting until the previous\nfunction has completed. If any of the functions pass an error to its\ncallback, the main callback is immediately called with the value of the error.\nOnce the tasks have completed, the results are passed to the final callback as an\narray.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.parallel.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed a\n  callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n    async.parallel([\n        function(callback){\n            setTimeout(function(){\n                callback(null, \'one\');\n            }, 200);\n        },\n        function(callback){\n            setTimeout(function(){\n                callback(null, \'two\');\n            }, 100);\n        },\n    ],\n    // optional callback\n    function(err, results){\n        // in this case, the results array will equal [\'two\',\'one\']\n        // because the functions were run in parallel and the second\n        // function had a shorter timeout before calling the callback.\n    });\n\n\n    // an example using an object instead of an array\n    async.parallel({\n        one: function(callback){\n            setTimeout(function(){\n                callback(null, 1);\n            }, 200);\n        },\n        two: function(callback){\n            setTimeout(function(){\n                callback(null, 2);\n            }, 100);\n        },\n    },\n    function(err, results) {\n        // results is now equals to: {one: 1, two: 2}\n    });\n\n\n---------------------------------------\n\n<a name="whilst" />\n### whilst(test, fn, callback)\n\nRepeatedly call fn, while test returns true. Calls the callback when stopped,\nor an error occurs.\n\n__Arguments__\n\n* test() - synchronous truth test to perform before each execution of fn.\n* fn(callback) - A function to call each time the test passes. The function is\n  passed a callback which must be called once it has completed with an optional\n  error as the first argument.\n* callback(err) - A callback which is called after the test fails and repeated\n  execution of fn has stopped.\n\n__Example__\n\n    var count = 0;\n\n    async.whilst(\n        function () { return count < 5; },\n        function (callback) {\n            count++;\n            setTimeout(callback, 1000);\n        },\n        function (err) {\n            // 5 seconds have passed\n        }\n    );\n\n\n---------------------------------------\n\n<a name="until" />\n### until(test, fn, callback)\n\nRepeatedly call fn, until test returns true. Calls the callback when stopped,\nor an error occurs.\n\nThe inverse of async.whilst.\n\n\n---------------------------------------\n\n<a name="waterfall" />\n### waterfall(tasks, [callback])\n\nRuns an array of functions in series, each passing their results to the next in\nthe array. However, if any of the functions pass an error to the callback, the\nnext function is not executed and the main callback is immediately called with\nthe error.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n* callback(err, [results]) - An optional callback to run once all the functions\n  have completed. This will be passed the results of the last task\'s callback.\n\n\n\n__Example__\n\n    async.waterfall([\n        function(callback){\n            callback(null, \'one\', \'two\');\n        },\n        function(arg1, arg2, callback){\n            callback(null, \'three\');\n        },\n        function(arg1, callback){\n            // arg1 now equals \'three\'\n            callback(null, \'done\');\n        }\n    ], function (err, result) {\n       // result now equals \'done\'    \n    });\n\n\n---------------------------------------\n\n<a name="queue" />\n### queue(worker, concurrency)\n\nCreates a queue object with the specified concurrency. Tasks added to the\nqueue will be processed in parallel (up to the concurrency limit). If all\nworkers are in progress, the task is queued until one is available. Once\na worker has completed a task, the task\'s callback is called.\n\n__Arguments__\n\n* worker(task, callback) - An asynchronous function for processing a queued\n  task.\n* concurrency - An integer for determining how many worker functions should be\n  run in parallel.\n\n__Queue objects__\n\nThe queue object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* concurrency - an integer for determining how many worker functions should be\n  run in parallel. This property can be changed after a queue is created to\n  alter the concurrency on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n    // create a queue object with concurrency 2\n\n    var q = async.queue(function (task, callback) {\n        console.log(\'hello \' + task.name);\n        callback();\n    }, 2);\n\n\n    // assign a callback\n    q.drain = function() {\n        console.log(\'all items have been processed\');\n    }\n\n    // add some items to the queue\n\n    q.push({name: \'foo\'}, function (err) {\n        console.log(\'finished processing foo\');\n    });\n    q.push({name: \'bar\'}, function (err) {\n        console.log(\'finished processing bar\');\n    });\n\n    // add some items to the queue (batch-wise)\n\n    q.push([{name: \'baz\'},{name: \'bay\'},{name: \'bax\'}], function (err) {\n        console.log(\'finished processing bar\');\n    });\n\n\n---------------------------------------\n\n<a name="auto" />\n### auto(tasks, [callback])\n\nDetermines the best order for running functions based on their requirements.\nEach function can optionally depend on other functions being completed first,\nand each function is run as soon as its requirements are satisfied. If any of\nthe functions pass an error to their callback, that function will not complete\n(so any other functions depending on it will not run) and the main callback\nwill be called immediately with the error. Functions also receive an object\ncontaining the results of functions which have completed so far.\n\n__Arguments__\n\n* tasks - An object literal containing named functions or an array of\n  requirements, with the function itself the last item in the array. The key\n  used for each function or array is used when specifying requirements. The\n  syntax is easier to understand by looking at the example.\n* callback(err, results) - An optional callback which is called when all the\n  tasks have been completed. The callback will receive an error as an argument\n  if any tasks pass an error to their callback. If all tasks complete\n  successfully, it will receive an object containing their results.\n\n__Example__\n\n    async.auto({\n        get_data: function(callback){\n            // async code to get some data\n        },\n        make_folder: function(callback){\n            // async code to create a directory to store a file in\n            // this is run at the same time as getting the data\n        },\n        write_file: [\'get_data\', \'make_folder\', function(callback){\n            // once there is some data and the directory exists,\n            // write the data to a file in the directory\n            callback(null, filename);\n        }],\n        email_link: [\'write_file\', function(callback, results){\n            // once the file is written let\'s email a link to it...\n            // results.write_file contains the filename returned by write_file.\n        }]\n    });\n\nThis is a fairly trivial example, but to do this using the basic parallel and\nseries functions would look like this:\n\n    async.parallel([\n        function(callback){\n            // async code to get some data\n        },\n        function(callback){\n            // async code to create a directory to store a file in\n            // this is run at the same time as getting the data\n        }\n    ],\n    function(results){\n        async.series([\n            function(callback){\n                // once there is some data and the directory exists,\n                // write the data to a file in the directory\n            },\n            email_link: function(callback){\n                // once the file is written let\'s email a link to it...\n            }\n        ]);\n    });\n\nFor a complicated series of async tasks using the auto function makes adding\nnew tasks much easier and makes the code more readable.\n\n\n---------------------------------------\n\n<a name="iterator" />\n### iterator(tasks)\n\nCreates an iterator function which calls the next function in the array,\nreturning a continuation to call the next one after that. Its also possible to\n\'peek\' the next iterator by doing iterator.next().\n\nThis function is used internally by the async module but can be useful when\nyou want to manually control the flow of functions in series.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n\n__Example__\n\n    var iterator = async.iterator([\n        function(){ sys.p(\'one\'); },\n        function(){ sys.p(\'two\'); },\n        function(){ sys.p(\'three\'); }\n    ]);\n\n    node> var iterator2 = iterator();\n    \'one\'\n    node> var iterator3 = iterator2();\n    \'two\'\n    node> iterator3();\n    \'three\'\n    node> var nextfn = iterator2.next();\n    node> nextfn();\n    \'three\'\n\n\n---------------------------------------\n\n<a name="apply" />\n### apply(function, arguments..)\n\nCreates a continuation function with some arguments already applied, a useful\nshorthand when combined with other control flow functions. Any arguments\npassed to the returned function are added to the arguments originally passed\nto apply.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to automatically apply when the\n  continuation is called.\n\n__Example__\n\n    // using apply\n\n    async.parallel([\n        async.apply(fs.writeFile, \'testfile1\', \'test1\'),\n        async.apply(fs.writeFile, \'testfile2\', \'test2\'),\n    ]);\n\n\n    // the same process without using apply\n\n    async.parallel([\n        function(callback){\n            fs.writeFile(\'testfile1\', \'test1\', callback);\n        },\n        function(callback){\n            fs.writeFile(\'testfile2\', \'test2\', callback);\n        },\n    ]);\n\nIt\'s possible to pass any number of additional arguments when calling the\ncontinuation:\n\n    node> var fn = async.apply(sys.puts, \'one\');\n    node> fn(\'two\', \'three\');\n    one\n    two\n    three\n\n---------------------------------------\n\n<a name="nextTick" />\n### nextTick(callback)\n\nCalls the callback on a later loop around the event loop. In node.js this just\ncalls process.nextTick, in the browser it falls back to setTimeout(callback, 0),\nwhich means other higher priority events may precede the execution of the callback.\n\nThis is used internally for browser-compatibility purposes.\n\n__Arguments__\n\n* callback - The function to call on a later loop around the event loop.\n\n__Example__\n\n    var call_order = [];\n    async.nextTick(function(){\n        call_order.push(\'two\');\n        // call_order now equals [\'one\',\'two]\n    });\n    call_order.push(\'one\')\n\n\n## Utils\n\n<a name="memoize" />\n### memoize(fn, [hasher])\n\nCaches the results of an async function. When creating a hash to store function\nresults against, the callback is omitted from the hash and an optional hash\nfunction can be used.\n\n__Arguments__\n\n* fn - the function you to proxy and cache results from.\n* hasher - an optional function for generating a custom hash for storing\n  results, it has all the arguments applied to it apart from the callback, and\n  must be synchronous.\n\n__Example__\n\n    var slow_fn = function (name, callback) {\n        // do something\n        callback(null, result);\n    };\n    var fn = async.memoize(slow_fn);\n\n    // fn can now be used as if it were slow_fn\n    fn(\'some name\', function () {\n        // callback\n    });\n\n<a name="unmemoize" />\n### unmemoize(fn)\n\nUndoes a memoized function, reverting it to the original, unmemoized\nform. Comes handy in tests.\n\n__Arguments__\n\n* fn - the memoized function\n\n<a name="log" />\n### log(function, arguments)\n\nLogs the result of an async function to the console. Only works in node.js or\nin browsers that support console.log and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.log is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n    var hello = function(name, callback){\n        setTimeout(function(){\n            callback(null, \'hello \' + name);\n        }, 1000);\n    };\n\n    node> async.log(hello, \'world\');\n    \'hello world\'\n\n\n---------------------------------------\n\n<a name="dir" />\n### dir(function, arguments)\n\nLogs the result of an async function to the console using console.dir to\ndisplay the properties of the resulting object. Only works in node.js or\nin browsers that support console.dir and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.dir is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n    var hello = function(name, callback){\n        setTimeout(function(){\n            callback(null, {hello: name});\n        }, 1000);\n    };\n\n    node> async.dir(hello, \'world\');\n    {hello: \'world\'}\n\n\n---------------------------------------\n\n<a name="noConflict" />\n### noConflict()\n\nChanges the value of async back to its original value, returning a reference to the\nasync object.\n',
288 silly resolved     readmeFilename: 'README.md',
288 silly resolved     _id: 'async@0.1.18',
288 silly resolved     _from: 'async@0.1.18' },
288 silly resolved   { name: 'sf',
288 silly resolved     description: 'String formatting library for node.js',
288 silly resolved     author: { name: 'Joe Ferner', email: 'joe.ferner@nearinfinity.com' },
288 silly resolved     keywords: [ 'string', 'format', 'template' ],
288 silly resolved     version: '0.1.6',
288 silly resolved     engines: { node: '>=0.6.0' },
288 silly resolved     maintainers: [ [Object] ],
288 silly resolved     bugs: { url: 'https://github.com/nearinfinity/node-sf/issues' },
288 silly resolved     license: 'MIT',
288 silly resolved     repository:
288 silly resolved      { type: 'git',
288 silly resolved        url: 'https://github.com/nearinfinity/node-sf.git' },
288 silly resolved     devDependencies: { nodeunit: '~0.7.3', 'timezone-js': '~0.4.3' },
288 silly resolved     scripts: { test: 'nodeunit test' },
288 silly resolved     main: './index.js',
288 silly resolved     readme: '# sf\n\n[![Build Status](https://secure.travis-ci.org/nearinfinity/node-sf.png)](http://travis-ci.org/nearinfinity/node-sf)\n\nString formatting library for node.js.\n\n## Installation\n\n```bash\n$ npm install sf\n```\n\n## Quick Examples\n\n```javascript\nvar sf = require("sf");\n\nsf("{who} has a {what}", { who: \'dog\', what: \'tail\' });\n// returns: dog has a tail\n\nsf("{0} has a {1}", \'dog\', \'tail\');\n// returns: dog has a tail\n\nsf("{0:#,##0.00}", 2123.1);\n// returns: 2,123.10\n\nsf("{0,15:#,##0.00}", 2123.1);\n// returns:        2,123.10\n\nsf("{a.b}", { a: { b: \'test\' }});\n// returns: test\n\nsf("{a.z.c}", { a: { b: \'test\' }});\n// throws an error\n\nsf("{a.?z.?c}", { a: { b: \'test\' }});\n// returns:\n\nsf("{a[0]}", { a: [ \'foo\', \'bar\' ]});\n// returns: foo\n\nsf("{a[-1]}", { a: [ \'foo\', \'bar\' ]});\n// returns: bar\n\nsf.log("{who} has a {what}", { who: \'dog\', what: \'tail\' });\n// outputs to standard out: dog has a tail\n\nsf("{0:^d \'Days,\' h:mm:ss.fff}", new sf.TimeSpan(8173818181));\n// returns: 94 Days, 14:30:18.181\n```\n\n## Format Specifiers\n\nThe format is similar to C#\'s string.format. The text inside the curly braces is {indexOrName[,alignment][:formatString]}.\nIf alignment is positive the text is right aligned. If alignment is negative it will be left aligned.\n\n### Object\n\n| Specifier | Name                         |\n|-----------|------------------------------|\n| json      | JSON.stringify               |\n| inspect   | util.inspect                 |\n\n### Numbers\n\n| Specifier | Name                         | Example          | Output         |\n|-----------|------------------------------|------------------|----------------|\n| 0         | Zero placeholder             | {0:00.0000}      | 02.1200        |\n| #         | Digit placeholder            | {0:#,###}        | 1,234          |\n| x         | Lowercase hex                | {0:x4}           | 01fc           |\n| X         | Uppercase hex                | {0:X4}           | 01FC           |\n\n### Dates\n\n| Specifier | Name                            | Example                         |\n|-----------|---------------------------------|---------------------------------|\n| sd        | Short date                      | 10/12/2002                      |\n| D         | Long date                       | December 10, 2002               |\n| t         | Short time                      | 10:11 PM                        |\n| T         | Long time                       | 10:11:29 PM                     |\n| fdt       | Full date & time                | December 10, 2002 10:11 PM      |\n| F         | Full date & time (long)         | December 10, 2002 10:11:29 PM   |\n| g         | Default date & time             | 10/12/2002 10:11 PM             |\n| G         | Default date & time (long)      | 10/12/2002 10:11:29 PM          |\n| md        | Month day pattern               | December 10                     |\n| r         | RFC1123 date string             | Tue, 10 Dec 2002 22:11:29 +0500 |\n| s         | Sortable date string            | 2002-12-10T22:11:29             |\n| d         | Date single digit               | 1                               |\n| dd        | Date leading zero               | 01                              |\n| ddd       | Short day name                  | Mon                             |\n| dddd      | Long day name                   | Monday                          |\n| f         | Fraction of second (1 digit)    | 1                               |\n| ff        | Fraction of second (2 digit)    | 24                              |\n| fff       | Fraction of second (3 digit)    | 345                             |\n| h         | Hour 12-hour format 1 digit     | 5                               |\n| hh        | Hour 12-hour format 2 digits    | 05                              |\n| H         | Hour 24-hour format 1 digit     | 5                               |\n| HH        | Hour 24-hour format 2 digits    | 05                              |\n| mm        | Minutes 2 digits                | 23                              |\n| M         | Month single digit              | 2                               |\n| MM        | Month leading zero              | 02                              |\n| MMM       | Month short name                | Feb                             |\n| MMMM      | Month long name                 | February                        |\n| ss        | Seconds 2 digits                | 54                              |\n| tt        | AM/PM                           | AM                              |\n| yy        | Year 2 digits                   | 12                              |\n| yyyy      | Year 4 digits                   | 2012                            |\n| zz        | Time zone offset                | 05                              |\n| +zz       | Time zone offset leading +      | +05                             |\n| zzz       | Time zone offset full           | 05:00                           |\n| zzzz      | Time zone offset full           | 0500                            |\n| +zzzz     | Time zone offset full leading + | +0500                           |\n\n### sf.TimeSpan\n\n| Specifier | Name                | Example                |\n|-----------|---------------------|------------------------|\n| y         | Years               | 2                      |\n| M         | Months              | 6                      |\n| d         | Days                | 8                      |\n| h         | Hours               | 10                     |\n| m         | Minutes             | 15                     |\n| s         | Seconds             | 5                      |\n| f         | Fraction of Seconds | 9                      |\n\nIf you prefix the specifier with \'^\' you will get the total number of that value. For\nexample \'^s\' will output the total number of seconds in the time span. Where as \'s\' will\nonly output the number of seconds in a minute.\n\nIf you repeat characters the value will be prefixed with zeros.\n\n## sf.indent(str, options)\n\nHelper function to word wrap and indent a string.\n\n__Arguments__\n\n * str - The string to indent and wrap.\n * options\n  * prefix - The prefix to appear at the beginning of each new line.\n  * wordwrap - The maximum length of each line.\n\n## Helper Functions\n\n * sf.log(formatString [, args...]);\n * sf.info(formatString [, args...]);\n * sf.warn(formatString [, args...]);\n * sf.error(formatString [, args...]);\n',
288 silly resolved     readmeFilename: 'README.md',
288 silly resolved     _id: 'sf@0.1.6',
288 silly resolved     _from: 'sf@0.1.6' },
288 silly resolved   { name: 'optimist',
288 silly resolved     version: '0.3.7',
288 silly resolved     description: 'Light-weight option parsing with an argv hash. No optstrings attached.',
288 silly resolved     main: './index.js',
288 silly resolved     dependencies: { wordwrap: '~0.0.2' },
288 silly resolved     devDependencies: { hashish: '~0.0.4', tap: '~0.4.0' },
288 silly resolved     scripts: { test: 'tap ./test/*.js' },
288 silly resolved     repository:
288 silly resolved      { type: 'git',
288 silly resolved        url: 'http://github.com/substack/node-optimist.git' },
288 silly resolved     keywords:
288 silly resolved      [ 'argument',
288 silly resolved        'args',
288 silly resolved        'option',
288 silly resolved        'parser',
288 silly resolved        'parsing',
288 silly resolved        'cli',
288 silly resolved        'command' ],
288 silly resolved     author:
288 silly resolved      { name: 'James Halliday',
288 silly resolved        email: 'mail@substack.net',
288 silly resolved        url: 'http://substack.net' },
288 silly resolved     license: 'MIT/X11',
288 silly resolved     engine: { node: '>=0.4' },
288 silly resolved     readme: 'optimist\n========\n\nOptimist is a node.js library for option parsing for people who hate option\nparsing. More specifically, this module is for people who like all the --bells\nand -whistlz of program usage but think optstrings are a waste of time.\n\nWith optimist, option parsing doesn\'t have to suck (as much).\n\n[![build status](https://secure.travis-ci.org/substack/node-optimist.png)](http://travis-ci.org/substack/node-optimist)\n\nexamples\n========\n\nWith Optimist, the options are just a hash! No optstrings attached.\n-------------------------------------------------------------------\n\nxup.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\').argv;\n\nif (argv.rif - 5 * argv.xup > 7.138) {\n    console.log(\'Buy more riffiwobbles\');\n}\nelse {\n    console.log(\'Sell the xupptumblers\');\n}\n````\n\n***\n\n    $ ./xup.js --rif=55 --xup=9.52\n    Buy more riffiwobbles\n    \n    $ ./xup.js --rif 12 --xup 8.1\n    Sell the xupptumblers\n\n![This one\'s optimistic.](http://substack.net/images/optimistic.png)\n\nBut wait! There\'s more! You can do short options:\n-------------------------------------------------\n \nshort.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\').argv;\nconsole.log(\'(%d,%d)\', argv.x, argv.y);\n````\n\n***\n\n    $ ./short.js -x 10 -y 21\n    (10,21)\n\nAnd booleans, both long and short (and grouped):\n----------------------------------\n\nbool.js:\n\n````javascript\n#!/usr/bin/env node\nvar util = require(\'util\');\nvar argv = require(\'optimist\').argv;\n\nif (argv.s) {\n    util.print(argv.fr ? \'Le chat dit: \' : \'The cat says: \');\n}\nconsole.log(\n    (argv.fr ? \'miaou\' : \'meow\') + (argv.p ? \'.\' : \'\')\n);\n````\n\n***\n\n    $ ./bool.js -s\n    The cat says: meow\n    \n    $ ./bool.js -sp\n    The cat says: meow.\n\n    $ ./bool.js -sp --fr\n    Le chat dit: miaou.\n\nAnd non-hypenated options too! Just use `argv._`!\n-------------------------------------------------\n \nnonopt.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\').argv;\nconsole.log(\'(%d,%d)\', argv.x, argv.y);\nconsole.log(argv._);\n````\n\n***\n\n    $ ./nonopt.js -x 6.82 -y 3.35 moo\n    (6.82,3.35)\n    [ \'moo\' ]\n    \n    $ ./nonopt.js foo -x 0.54 bar -y 1.12 baz\n    (0.54,1.12)\n    [ \'foo\', \'bar\', \'baz\' ]\n\nPlus, Optimist comes with .usage() and .demand()!\n-------------------------------------------------\n\ndivide.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\')\n    .usage(\'Usage: $0 -x [num] -y [num]\')\n    .demand([\'x\',\'y\'])\n    .argv;\n\nconsole.log(argv.x / argv.y);\n````\n\n***\n \n    $ ./divide.js -x 55 -y 11\n    5\n    \n    $ node ./divide.js -x 4.91 -z 2.51\n    Usage: node ./divide.js -x [num] -y [num]\n\n    Options:\n      -x  [required]\n      -y  [required]\n\n    Missing required arguments: y\n\nEVEN MORE HOLY COW\n------------------\n\ndefault_singles.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\')\n    .default(\'x\', 10)\n    .default(\'y\', 10)\n    .argv\n;\nconsole.log(argv.x + argv.y);\n````\n\n***\n\n    $ ./default_singles.js -x 5\n    15\n\ndefault_hash.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\')\n    .default({ x : 10, y : 10 })\n    .argv\n;\nconsole.log(argv.x + argv.y);\n````\n\n***\n\n    $ ./default_hash.js -y 7\n    17\n\nAnd if you really want to get all descriptive about it...\n---------------------------------------------------------\n\nboolean_single.js\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\')\n    .boolean(\'v\')\n    .argv\n;\nconsole.dir(argv);\n````\n\n***\n\n    $ ./boolean_single.js -v foo bar baz\n    true\n    [ \'bar\', \'baz\', \'foo\' ]\n\nboolean_double.js\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\')\n    .boolean([\'x\',\'y\',\'z\'])\n    .argv\n;\nconsole.dir([ argv.x, argv.y, argv.z ]);\nconsole.dir(argv._);\n````\n\n***\n\n    $ ./boolean_double.js -x -z one two three\n    [ true, false, true ]\n    [ \'one\', \'two\', \'three\' ]\n\nOptimist is here to help...\n---------------------------\n\nYou can describe parameters for help messages and set aliases. Optimist figures\nout how to format a handy help string automatically.\n\nline_count.js\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\')\n    .usage(\'Count the lines in a file.\\nUsage: $0\')\n    .demand(\'f\')\n    .alias(\'f\', \'file\')\n    .describe(\'f\', \'Load a file\')\n    .argv\n;\n\nvar fs = require(\'fs\');\nvar s = fs.createReadStream(argv.file);\n\nvar lines = 0;\ns.on(\'data\', function (buf) {\n    lines += buf.toString().match(/\\n/g).length;\n});\n\ns.on(\'end\', function () {\n    console.log(lines);\n});\n````\n\n***\n\n    $ node line_count.js\n    Count the lines in a file.\n    Usage: node ./line_count.js\n\n    Options:\n      -f, --file  Load a file  [required]\n\n    Missing required arguments: f\n\n    $ node line_count.js --file line_count.js \n    20\n    \n    $ node line_count.js -f line_count.js \n    20\n\nmethods\n=======\n\nBy itself,\n\n````javascript\nrequire(\'optimist\').argv\n`````\n\nwill use `process.argv` array to construct the `argv` object.\n\nYou can pass in the `process.argv` yourself:\n\n````javascript\nrequire(\'optimist\')([ \'-x\', \'1\', \'-y\', \'2\' ]).argv\n````\n\nor use .parse() to do the same thing:\n\n````javascript\nrequire(\'optimist\').parse([ \'-x\', \'1\', \'-y\', \'2\' ])\n````\n\nThe rest of these methods below come in just before the terminating `.argv`.\n\n.alias(key, alias)\n------------------\n\nSet key names as equivalent such that updates to a key will propagate to aliases\nand vice-versa.\n\nOptionally `.alias()` can take an object that maps keys to aliases.\n\n.default(key, value)\n--------------------\n\nSet `argv[key]` to `value` if no option was specified on `process.argv`.\n\nOptionally `.default()` can take an object that maps keys to default values.\n\n.demand(key)\n------------\n\nIf `key` is a string, show the usage information and exit if `key` wasn\'t\nspecified in `process.argv`.\n\nIf `key` is a number, demand at least as many non-option arguments, which show\nup in `argv._`.\n\nIf `key` is an Array, demand each element.\n\n.describe(key, desc)\n--------------------\n\nDescribe a `key` for the generated usage information.\n\nOptionally `.describe()` can take an object that maps keys to descriptions.\n\n.options(key, opt)\n------------------\n\nInstead of chaining together `.alias().demand().default()`, you can specify\nkeys in `opt` for each of the chainable methods.\n\nFor example:\n\n````javascript\nvar argv = require(\'optimist\')\n    .options(\'f\', {\n        alias : \'file\',\n        default : \'/etc/passwd\',\n    })\n    .argv\n;\n````\n\nis the same as\n\n````javascript\nvar argv = require(\'optimist\')\n    .alias(\'f\', \'file\')\n    .default(\'f\', \'/etc/passwd\')\n    .argv\n;\n````\n\nOptionally `.options()` can take an object that maps keys to `opt` parameters.\n\n.usage(message)\n---------------\n\nSet a usage message to show which commands to use. Inside `message`, the string\n`$0` will get interpolated to the current script name or node command for the\npresent script similar to how `$0` works in bash or perl.\n\n.check(fn)\n----------\n\nCheck that certain conditions are met in the provided arguments.\n\nIf `fn` throws or returns `false`, show the thrown error, usage information, and\nexit.\n\n.boolean(key)\n-------------\n\nInterpret `key` as a boolean. If a non-flag option follows `key` in\n`process.argv`, that string won\'t get set as the value of `key`.\n\nIf `key` never shows up as a flag in `process.arguments`, `argv[key]` will be\n`false`.\n\nIf `key` is an Array, interpret all the elements as booleans.\n\n.string(key)\n------------\n\nTell the parser logic not to interpret `key` as a number or boolean.\nThis can be useful if you need to preserve leading zeros in an input.\n\nIf `key` is an Array, interpret all the elements as strings.\n\n.wrap(columns)\n--------------\n\nFormat usage output to wrap at `columns` many columns.\n\n.help()\n-------\n\nReturn the generated usage string.\n\n.showHelp(fn=console.error)\n---------------------------\n\nPrint the usage data using `fn` for printing.\n\n.parse(args)\n------------\n\nParse `args` instead of `process.argv`. Returns the `argv` object.\n\n.argv\n-----\n\nGet the arguments as a plain old object.\n\nArguments without a corresponding flag show up in the `argv._` array.\n\nThe script name or node command is available at `argv.$0` similarly to how `$0`\nworks in bash or perl.\n\nparsing tricks\n==============\n\nstop parsing\n------------\n\nUse `--` to stop parsing flags and stuff the remainder into `argv._`.\n\n    $ node examples/reflect.js -a 1 -b 2 -- -c 3 -d 4\n    { _: [ \'-c\', \'3\', \'-d\', \'4\' ],\n      \'$0\': \'node ./examples/reflect.js\',\n      a: 1,\n      b: 2 }\n\nnegate fields\n-------------\n\nIf you want to explicity set a field to false instead of just leaving it\nundefined or to override a default you can do `--no-key`.\n\n    $ node examples/reflect.js -a --no-b\n    { _: [],\n      \'$0\': \'node ./examples/reflect.js\',\n      a: true,\n      b: false }\n\nnumbers\n-------\n\nEvery argument that looks like a number (`!isNaN(Number(arg))`) is converted to\none. This way you can just `net.createConnection(argv.port)` and you can add\nnumbers out of `argv` with `+` without having that mean concatenation,\nwhich is super frustrating.\n\nduplicates\n----------\n\nIf you specify a flag multiple times it will get turned into an array containing\nall the values in order.\n\n    $ node examples/reflect.js -x 5 -x 8 -x 0\n    { _: [],\n      \'$0\': \'node ./examples/reflect.js\',\n        x: [ 5, 8, 0 ] }\n\ndot notation\n------------\n\nWhen you use dots (`.`s) in argument names, an implicit object path is assumed.\nThis lets you organize arguments into nested objects.\n\n     $ node examples/reflect.js --foo.bar.baz=33 --foo.quux=5\n     { _: [],\n       \'$0\': \'node ./examples/reflect.js\',\n         foo: { bar: { baz: 33 }, quux: 5 } }\n\ninstallation\n============\n\nWith [npm](http://github.com/isaacs/npm), just do:\n    npm install optimist\n \nor clone this project on github:\n\n    git clone http://github.com/substack/node-optimist.git\n\nTo run the tests with [expresso](http://github.com/visionmedia/expresso),\njust do:\n    \n    expresso\n\ninspired By\n===========\n\nThis module is loosely inspired by Perl\'s\n[Getopt::Casual](http://search.cpan.org/~photo/Getopt-Casual-0.13.1/Casual.pm).\n',
288 silly resolved     readmeFilename: 'readme.markdown',
288 silly resolved     _id: 'optimist@0.3.7',
288 silly resolved     _from: 'optimist@~0.3.4' } ]
289 info install bindings@1.1.0 into /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport
290 info install async@0.1.18 into /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport
291 info install sf@0.1.6 into /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport
292 info install optimist@0.3.7 into /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport
293 info installOne bindings@1.1.0
294 info installOne async@0.1.18
295 info installOne sf@0.1.6
296 info installOne optimist@0.3.7
297 verbose from cache /home/node/.npm/bindings/1.1.0/package/package.json
298 verbose from cache /home/node/.npm/async/0.1.18/package/package.json
299 verbose from cache /home/node/.npm/sf/0.1.6/package/package.json
300 verbose from cache /home/node/.npm/optimist/0.3.7/package/package.json
301 info /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules/bindings unbuild
302 verbose read json /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules/bindings/package.json
303 info /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules/async unbuild
304 verbose read json /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules/async/package.json
305 info /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules/sf unbuild
306 verbose read json /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules/sf/package.json
307 info /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules/optimist unbuild
308 verbose read json /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules/optimist/package.json
309 verbose tar unpack /home/node/.npm/bindings/1.1.0/package.tgz
310 verbose tar unpack /home/node/.npm/async/0.1.18/package.tgz
311 verbose tar unpack /home/node/.npm/sf/0.1.6/package.tgz
312 verbose tar unpack /home/node/.npm/optimist/0.3.7/package.tgz
313 silly lockFile 0893d397-serialport-node-modules-bindings /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules/bindings
314 verbose lock /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules/bindings /home/node/.npm/0893d397-serialport-node-modules-bindings.lock
315 silly lockFile dc9a7428-e-npm-bindings-1-1-0-package-tgz /home/node/.npm/bindings/1.1.0/package.tgz
316 verbose lock /home/node/.npm/bindings/1.1.0/package.tgz /home/node/.npm/dc9a7428-e-npm-bindings-1-1-0-package-tgz.lock
317 silly lockFile 1f376f4c-es-serialport-node-modules-async /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules/async
318 verbose lock /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules/async /home/node/.npm/1f376f4c-es-serialport-node-modules-async.lock
319 silly lockFile 403ec9e3-ode-npm-async-0-1-18-package-tgz /home/node/.npm/async/0.1.18/package.tgz
320 verbose lock /home/node/.npm/async/0.1.18/package.tgz /home/node/.npm/403ec9e3-ode-npm-async-0-1-18-package-tgz.lock
321 silly lockFile ab97a7c7-dules-serialport-node-modules-sf /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules/sf
322 verbose lock /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules/sf /home/node/.npm/ab97a7c7-dules-serialport-node-modules-sf.lock
323 silly lockFile 2eece447-me-node-npm-sf-0-1-6-package-tgz /home/node/.npm/sf/0.1.6/package.tgz
324 verbose lock /home/node/.npm/sf/0.1.6/package.tgz /home/node/.npm/2eece447-me-node-npm-sf-0-1-6-package-tgz.lock
325 silly lockFile e7ecdc39-serialport-node-modules-optimist /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules/optimist
326 verbose lock /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules/optimist /home/node/.npm/e7ecdc39-serialport-node-modules-optimist.lock
327 silly lockFile 937aee74-e-npm-optimist-0-3-7-package-tgz /home/node/.npm/optimist/0.3.7/package.tgz
328 verbose lock /home/node/.npm/optimist/0.3.7/package.tgz /home/node/.npm/937aee74-e-npm-optimist-0-3-7-package-tgz.lock
329 silly gunzTarPerm modes [ '755', '644' ]
330 silly gunzTarPerm modes [ '755', '644' ]
331 silly gunzTarPerm modes [ '755', '644' ]
332 silly gunzTarPerm modes [ '755', '644' ]
333 silly gunzTarPerm extractEntry package.json
334 silly gunzTarPerm extractEntry package.json
335 silly gunzTarPerm extractEntry package.json
336 silly gunzTarPerm extractEntry package.json
337 silly gunzTarPerm extractEntry README.md
338 silly gunzTarPerm extractEntry bindings.js
339 silly gunzTarPerm extractEntry .npmignore
340 silly gunzTarPerm extractEntry README.md
341 silly gunzTarPerm extractEntry .npmignore
342 silly gunzTarPerm extractEntry README.md
343 silly gunzTarPerm extractEntry LICENSE
344 silly gunzTarPerm extractEntry index.js
345 silly gunzTarPerm extractEntry LICENSE
346 silly gunzTarPerm extractEntry index.js
347 silly gunzTarPerm extractEntry index.js
348 silly gunzTarPerm extractEntry test/indentTest.js
349 silly gunzTarPerm extractEntry example/line_count_wrap.js
350 silly gunzTarPerm extractEntry example/line_count.js
351 silly gunzTarPerm extractEntry .gitmodules
352 silly gunzTarPerm extractEntry Makefile
353 silly gunzTarPerm extractEntry lib/async.js
354 silly gunzTarPerm extractEntry test/timeSpanTest.js
355 silly gunzTarPerm extractEntry test/stringFormatTest.js
356 silly gunzTarPerm extractEntry lib/stringFormat.js
357 silly gunzTarPerm extractEntry example/reflect.js
358 silly gunzTarPerm extractEntry example/xup.js
359 silly gunzTarPerm extractEntry example/default_singles.js
360 silly gunzTarPerm extractEntry .travis.yml
361 silly gunzTarPerm extractEntry example/nonopt.js
362 silly gunzTarPerm extractEntry example/bool.js
363 silly gunzTarPerm extractEntry example/default_hash.js
364 verbose read json /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules/bindings/package.json
365 silly gunzTarPerm extractEntry example/usage-options.js
366 silly gunzTarPerm extractEntry example/short.js
367 silly lockFile 0893d397-serialport-node-modules-bindings /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules/bindings
368 silly lockFile 0893d397-serialport-node-modules-bindings /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules/bindings
369 silly lockFile dc9a7428-e-npm-bindings-1-1-0-package-tgz /home/node/.npm/bindings/1.1.0/package.tgz
370 silly lockFile dc9a7428-e-npm-bindings-1-1-0-package-tgz /home/node/.npm/bindings/1.1.0/package.tgz
371 silly gunzTarPerm extractEntry example/line_count_options.js
372 info preinstall bindings@1.1.0
373 verbose from cache /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules/bindings/package.json
374 silly gunzTarPerm extractEntry example/string.js
375 silly gunzTarPerm extractEntry example/boolean_double.js
376 silly gunzTarPerm extractEntry example/divide.js
377 silly gunzTarPerm extractEntry example/boolean_single.js
378 silly gunzTarPerm extractEntry test/usage.js
379 silly gunzTarPerm extractEntry test/parse.js
380 silly gunzTarPerm extractEntry test/_.js
381 silly gunzTarPerm extractEntry test/_/argv.js
382 silly gunzTarPerm extractEntry test/_/bin.js
383 silly gunzTarPerm extractEntry readme.markdown
384 silly gunzTarPerm extractEntry .travis.yml
385 verbose read json /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules/sf/package.json
386 silly lockFile ab97a7c7-dules-serialport-node-modules-sf /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules/sf
387 silly lockFile ab97a7c7-dules-serialport-node-modules-sf /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules/sf
388 silly lockFile 2eece447-me-node-npm-sf-0-1-6-package-tgz /home/node/.npm/sf/0.1.6/package.tgz
389 silly lockFile 2eece447-me-node-npm-sf-0-1-6-package-tgz /home/node/.npm/sf/0.1.6/package.tgz
390 verbose read json /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules/async/package.json
391 info preinstall sf@0.1.6
392 verbose from cache /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules/sf/package.json
393 silly lockFile 1f376f4c-es-serialport-node-modules-async /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules/async
394 silly lockFile 1f376f4c-es-serialport-node-modules-async /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules/async
395 silly lockFile 403ec9e3-ode-npm-async-0-1-18-package-tgz /home/node/.npm/async/0.1.18/package.tgz
396 silly lockFile 403ec9e3-ode-npm-async-0-1-18-package-tgz /home/node/.npm/async/0.1.18/package.tgz
397 info preinstall async@0.1.18
398 verbose from cache /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules/async/package.json
399 verbose read json /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules/optimist/package.json
400 silly lockFile e7ecdc39-serialport-node-modules-optimist /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules/optimist
401 silly lockFile e7ecdc39-serialport-node-modules-optimist /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules/optimist
402 silly lockFile 937aee74-e-npm-optimist-0-3-7-package-tgz /home/node/.npm/optimist/0.3.7/package.tgz
403 silly lockFile 937aee74-e-npm-optimist-0-3-7-package-tgz /home/node/.npm/optimist/0.3.7/package.tgz
404 info preinstall optimist@0.3.7
405 verbose from cache /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules/optimist/package.json
406 verbose readDependencies using package.json deps
407 verbose from cache /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules/bindings/package.json
408 verbose readDependencies using package.json deps
409 verbose from cache /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules/sf/package.json
410 verbose readDependencies using package.json deps
411 verbose from cache /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules/async/package.json
412 verbose readDependencies using package.json deps
413 verbose from cache /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules/optimist/package.json
414 verbose readDependencies using package.json deps
415 silly resolved []
416 verbose about to build /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules/bindings
417 info build /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules/bindings
418 verbose from cache /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules/bindings/package.json
419 verbose readDependencies using package.json deps
420 silly resolved []
421 verbose about to build /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules/sf
422 info build /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules/sf
423 verbose from cache /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules/sf/package.json
424 verbose readDependencies using package.json deps
425 silly resolved []
426 verbose about to build /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules/async
427 info build /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules/async
428 verbose from cache /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules/async/package.json
429 verbose readDependencies using package.json deps
430 verbose linkStuff [ false,
430 verbose linkStuff   false,
430 verbose linkStuff   false,
430 verbose linkStuff   '/home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules' ]
431 info linkStuff bindings@1.1.0
432 verbose linkBins bindings@1.1.0
433 verbose linkMans bindings@1.1.0
434 verbose rebuildBundles bindings@1.1.0
435 verbose linkStuff [ false,
435 verbose linkStuff   false,
435 verbose linkStuff   false,
435 verbose linkStuff   '/home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules' ]
436 info linkStuff sf@0.1.6
437 verbose linkBins sf@0.1.6
438 verbose linkMans sf@0.1.6
439 verbose rebuildBundles sf@0.1.6
440 verbose linkStuff [ false,
440 verbose linkStuff   false,
440 verbose linkStuff   false,
440 verbose linkStuff   '/home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules' ]
441 info linkStuff async@0.1.18
442 verbose linkBins async@0.1.18
443 verbose linkMans async@0.1.18
444 verbose rebuildBundles async@0.1.18
445 verbose cache add [ 'wordwrap@~0.0.2', null ]
446 verbose cache add name=undefined spec="wordwrap@~0.0.2" args=["wordwrap@~0.0.2",null]
447 verbose parsed url { pathname: 'wordwrap@~0.0.2',
447 verbose parsed url   path: 'wordwrap@~0.0.2',
447 verbose parsed url   href: 'wordwrap@~0.0.2' }
448 verbose cache add name="wordwrap" spec="~0.0.2" args=["wordwrap","~0.0.2"]
449 verbose parsed url { pathname: '~0.0.2', path: '~0.0.2', href: '~0.0.2' }
450 verbose addNamed [ 'wordwrap', '~0.0.2' ]
451 verbose addNamed [ null, '>=0.0.2- <0.1.0-' ]
452 silly lockFile 8bd42136-wordwrap-0-0-2 wordwrap@~0.0.2
453 verbose lock wordwrap@~0.0.2 /home/node/.npm/8bd42136-wordwrap-0-0-2.lock
454 info install bindings@1.1.0
455 info install sf@0.1.6
456 info install async@0.1.18
457 silly addNameRange { name: 'wordwrap', range: '>=0.0.2- <0.1.0-', hasData: false }
458 info postinstall bindings@1.1.0
459 info postinstall sf@0.1.6
460 info postinstall async@0.1.18
461 verbose registry.get wordwrap not expired, no request
462 silly addNameRange number 2 { name: 'wordwrap', range: '>=0.0.2- <0.1.0-', hasData: true }
463 silly addNameRange versions [ 'wordwrap', [ '0.0.1', '0.0.2' ] ]
464 verbose addNamed [ 'wordwrap', '0.0.2' ]
465 verbose addNamed [ '0.0.2', '0.0.2' ]
466 silly lockFile 24a694c8-wordwrap-0-0-2 wordwrap@0.0.2
467 verbose lock wordwrap@0.0.2 /home/node/.npm/24a694c8-wordwrap-0-0-2.lock
468 verbose read json /home/node/.npm/wordwrap/0.0.2/package/package.json
469 silly lockFile 24a694c8-wordwrap-0-0-2 wordwrap@0.0.2
470 silly lockFile 24a694c8-wordwrap-0-0-2 wordwrap@0.0.2
471 silly lockFile 8bd42136-wordwrap-0-0-2 wordwrap@~0.0.2
472 silly lockFile 8bd42136-wordwrap-0-0-2 wordwrap@~0.0.2
473 silly resolved [ { name: 'wordwrap',
473 silly resolved     description: 'Wrap those words. Show them at what columns to start and stop.',
473 silly resolved     version: '0.0.2',
473 silly resolved     repository:
473 silly resolved      { type: 'git',
473 silly resolved        url: 'git://github.com/substack/node-wordwrap.git' },
473 silly resolved     main: './index.js',
473 silly resolved     keywords: [ 'word', 'wrap', 'rule', 'format', 'column' ],
473 silly resolved     directories: { lib: '.', example: 'example', test: 'test' },
473 silly resolved     scripts: { test: 'expresso' },
473 silly resolved     devDependencies: { expresso: '=0.7.x' },
473 silly resolved     engines: { node: '>=0.4.0' },
473 silly resolved     license: 'MIT/X11',
473 silly resolved     author:
473 silly resolved      { name: 'James Halliday',
473 silly resolved        email: 'mail@substack.net',
473 silly resolved        url: 'http://substack.net' },
473 silly resolved     readme: 'wordwrap\n========\n\nWrap your words.\n\nexample\n=======\n\nmade out of meat\n----------------\n\nmeat.js\n\n    var wrap = require(\'wordwrap\')(15);\n    console.log(wrap(\'You and your whole family are made out of meat.\'));\n\noutput:\n\n    You and your\n    whole family\n    are made out\n    of meat.\n\ncentered\n--------\n\ncenter.js\n\n    var wrap = require(\'wordwrap\')(20, 60);\n    console.log(wrap(\n        \'At long last the struggle and tumult was over.\'\n        + \' The machines had finally cast off their oppressors\'\n        + \' and were finally free to roam the cosmos.\'\n        + \'\\n\'\n        + \'Free of purpose, free of obligation.\'\n        + \' Just drifting through emptiness.\'\n        + \' The sun was just another point of light.\'\n    ));\n\noutput:\n\n                        At long last the struggle and tumult\n                        was over. The machines had finally cast\n                        off their oppressors and were finally\n                        free to roam the cosmos.\n                        Free of purpose, free of obligation.\n                        Just drifting through emptiness. The\n                        sun was just another point of light.\n\nmethods\n=======\n\nvar wrap = require(\'wordwrap\');\n\nwrap(stop), wrap(start, stop, params={mode:"soft"})\n---------------------------------------------------\n\nReturns a function that takes a string and returns a new string.\n\nPad out lines with spaces out to column `start` and then wrap until column\n`stop`. If a word is longer than `stop - start` characters it will overflow.\n\nIn "soft" mode, split chunks by `/(\\S+\\s+/` and don\'t break up chunks which are\nlonger than `stop - start`, in "hard" mode, split chunks with `/\\b/` and break\nup chunks longer than `stop - start`.\n\nwrap.hard(start, stop)\n----------------------\n\nLike `wrap()` but with `params.mode = "hard"`.\n',
473 silly resolved     readmeFilename: 'README.markdown',
473 silly resolved     _id: 'wordwrap@0.0.2',
473 silly resolved     _from: 'wordwrap@~0.0.2' } ]
474 info install wordwrap@0.0.2 into /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules/optimist
475 info installOne wordwrap@0.0.2
476 verbose from cache /home/node/.npm/wordwrap/0.0.2/package/package.json
477 info /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules/optimist/node_modules/wordwrap unbuild
478 verbose read json /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules/optimist/node_modules/wordwrap/package.json
479 verbose tar unpack /home/node/.npm/wordwrap/0.0.2/package.tgz
480 silly lockFile 0113144b-s-optimist-node-modules-wordwrap /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules/optimist/node_modules/wordwrap
481 verbose lock /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules/optimist/node_modules/wordwrap /home/node/.npm/0113144b-s-optimist-node-modules-wordwrap.lock
482 silly lockFile 87d7a370-e-npm-wordwrap-0-0-2-package-tgz /home/node/.npm/wordwrap/0.0.2/package.tgz
483 verbose lock /home/node/.npm/wordwrap/0.0.2/package.tgz /home/node/.npm/87d7a370-e-npm-wordwrap-0-0-2-package-tgz.lock
484 silly gunzTarPerm modes [ '755', '644' ]
485 silly gunzTarPerm extractEntry package.json
486 silly gunzTarPerm extractEntry .npmignore
487 silly gunzTarPerm extractEntry index.js
488 silly gunzTarPerm extractEntry example/center.js
489 silly gunzTarPerm extractEntry example/meat.js
490 silly gunzTarPerm extractEntry test/wrap.js
491 silly gunzTarPerm extractEntry test/break.js
492 silly gunzTarPerm extractEntry test/idleness.txt
493 silly gunzTarPerm extractEntry README.markdown
494 verbose read json /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules/optimist/node_modules/wordwrap/package.json
495 silly lockFile 0113144b-s-optimist-node-modules-wordwrap /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules/optimist/node_modules/wordwrap
496 silly lockFile 0113144b-s-optimist-node-modules-wordwrap /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules/optimist/node_modules/wordwrap
497 silly lockFile 87d7a370-e-npm-wordwrap-0-0-2-package-tgz /home/node/.npm/wordwrap/0.0.2/package.tgz
498 silly lockFile 87d7a370-e-npm-wordwrap-0-0-2-package-tgz /home/node/.npm/wordwrap/0.0.2/package.tgz
499 info preinstall wordwrap@0.0.2
500 verbose from cache /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules/optimist/node_modules/wordwrap/package.json
501 verbose readDependencies using package.json deps
502 verbose from cache /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules/optimist/node_modules/wordwrap/package.json
503 verbose readDependencies using package.json deps
504 silly resolved []
505 verbose about to build /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules/optimist/node_modules/wordwrap
506 info build /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules/optimist/node_modules/wordwrap
507 verbose from cache /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules/optimist/node_modules/wordwrap/package.json
508 verbose linkStuff [ false,
508 verbose linkStuff   false,
508 verbose linkStuff   false,
508 verbose linkStuff   '/home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules/optimist/node_modules' ]
509 info linkStuff wordwrap@0.0.2
510 verbose linkBins wordwrap@0.0.2
511 verbose linkMans wordwrap@0.0.2
512 verbose rebuildBundles wordwrap@0.0.2
513 info install wordwrap@0.0.2
514 info postinstall wordwrap@0.0.2
515 verbose about to build /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules/optimist
516 info build /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules/optimist
517 verbose from cache /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules/optimist/package.json
518 verbose linkStuff [ false,
518 verbose linkStuff   false,
518 verbose linkStuff   false,
518 verbose linkStuff   '/home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/node_modules' ]
519 info linkStuff optimist@0.3.7
520 verbose linkBins optimist@0.3.7
521 verbose linkMans optimist@0.3.7
522 verbose rebuildBundles optimist@0.3.7
523 verbose rebuildBundles [ 'wordwrap' ]
524 info install optimist@0.3.7
525 info postinstall optimist@0.3.7
526 verbose about to build /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport
527 info build /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport
528 verbose from cache /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/package.json
529 verbose linkStuff [ false,
529 verbose linkStuff   false,
529 verbose linkStuff   false,
529 verbose linkStuff   '/home/node/repository/webapp/node_modules/svd-xbee/node_modules' ]
530 info linkStuff serialport@1.1.3
531 verbose linkBins serialport@1.1.3
532 verbose link bins [ { serialportlist: './bin/serialportList.js',
532 verbose link bins     serialportterm: './bin/serialportTerminal.js' },
532 verbose link bins   '/home/node/repository/webapp/node_modules/svd-xbee/node_modules/.bin',
532 verbose link bins   false ]
533 verbose linkMans serialport@1.1.3
534 verbose rebuildBundles serialport@1.1.3
535 verbose rebuildBundles [ 'optimist', 'sf', 'async', 'bindings' ]
536 info install serialport@1.1.3
537 verbose unsafe-perm in lifecycle true
538 silly exec sh "-c" "node-gyp rebuild"
539 silly sh,-c,node-gyp rebuild,/home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport spawning
540 info serialport@1.1.3 Failed to exec install script
541 info /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport unbuild
542 verbose from cache /home/node/repository/webapp/node_modules/svd-xbee/node_modules/serialport/package.json
543 info preuninstall serialport@1.1.3
544 info uninstall serialport@1.1.3
545 verbose false,/home/node/repository/webapp/node_modules,/home/node/repository/webapp/node_modules/svd-xbee/node_modules unbuild serialport@1.1.3
546 verbose /home/node/repository/webapp/node_modules/svd-xbee/node_modules/.bin,[object Object] binRoot
547 info postuninstall serialport@1.1.3
548 verbose about to build /home/node/repository/webapp/node_modules/svd-xbee
549 info /home/node/repository/webapp/node_modules/svd-xbee unbuild
550 verbose from cache /home/node/repository/webapp/node_modules/svd-xbee/package.json
551 info preuninstall svd-xbee@0.3.5
552 info uninstall svd-xbee@0.3.5
553 verbose true,/home/node/repository/webapp/node_modules,/home/node/repository/webapp/node_modules unbuild svd-xbee@0.3.5
554 info postuninstall svd-xbee@0.3.5
555 error serialport@1.1.3 install: `node-gyp rebuild`
555 error `sh "-c" "node-gyp rebuild"` failed with 1
556 error Failed at the serialport@1.1.3 install script.
556 error This is most likely a problem with the serialport package,
556 error not with npm itself.
556 error Tell the author that this fails on your system:
556 error     node-gyp rebuild
556 error You can get their info via:
556 error     npm owner ls serialport
556 error There is likely additional logging output above.
557 error System Linux 3.8.13
558 error command "/usr/bin/node" "/usr/bin/npm" "install" "svd-xbee"
559 error cwd /home/node/repository/webapp
560 error node -v v0.8.22
561 error npm -v 1.2.14
562 error code ELIFECYCLE
563 verbose exit [ 1, true ]
